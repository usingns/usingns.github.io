<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://usingns.github.io/atom.xml" rel="self"/>
  
  <link href="https://usingns.github.io/"/>
  <updated>2024-08-13T11:09:03.135Z</updated>
  <id>https://usingns.github.io/</id>
  
  <author>
    <name>us1n9ns</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://usingns.github.io/2025/07/14/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C%E9%9A%8F%E7%AC%94/"/>
    <id>https://usingns.github.io/2025/07/14/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C%E9%9A%8F%E7%AC%94/</id>
    <published>2025-07-14T01:31:56.916Z</published>
    <updated>2024-08-13T11:09:03.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XXXXXX生存手册随笔"><a href="#XXXXXX生存手册随笔" class="headerlink" title="XXXXXX生存手册随笔"></a>XXXXXX生存手册随笔</h1><p>真正成为我们上课理由的，只有对知识的渴望</p><p>学习需要的不是悲壮的毅力，是对知识的渴求</p><p>平庸的生活方式是麻醉剂</p><p>我们必须一日三省，今天的时间是否过得有价值</p><p>原创性思考</p><hr><p>小结：</p><ul><li><p>做真正对知识学习有帮助的事情，帮助越长远越值得去做</p></li><li><p>保证自己的原创性思考</p></li><li><p>在研究中，把握个人定位，自己走到了哪一步（位置感和方向感）和自己要如何走这步（时间利用率和计划与规划）</p></li><li><p>平庸的生活方式是麻醉剂，我们必须一日三省，今天的时间是否过得有价值</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XXXXXX生存手册随笔&quot;&gt;&lt;a href=&quot;#XXXXXX生存手册随笔&quot; class=&quot;headerlink&quot; title=&quot;XXXXXX生存手册随笔&quot;&gt;&lt;/a&gt;XXXXXX生存手册随笔&lt;/h1&gt;&lt;p&gt;真正成为我们上课理由的，只有对知识的渴望&lt;/p&gt;
&lt;p&gt;学习</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>反射机制</title>
    <link href="https://usingns.github.io/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://usingns.github.io/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</id>
    <published>2025-04-03T03:07:50.000Z</published>
    <updated>2025-04-03T04:28:34.800Z</updated>
    
    <content type="html"><![CDATA[<ul><li>（抽象概念）RTTI（Run-Time Type Identification）运行时类型识别，主要两种方式<br>  传统的RTTI，我们编写知道所有的类型·<br>  反射机制，允许在运行时查询和操作类的信息<br>  太抽象了举例子<br>  正常写代码，一个类写出来</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class showclass &#123;  </span><br><span class="line">    String classname;  </span><br><span class="line">    //默认无参方法  </span><br><span class="line">    showclass() &#123;&#125;  </span><br><span class="line">    //有参方法  </span><br><span class="line">    showclass(String classname) &#123;  </span><br><span class="line">        //初始化  </span><br><span class="line">        this.classname = classname;  </span><br><span class="line">    &#125;  </span><br><span class="line">    void show() &#123;  </span><br><span class="line">        System.out.println(classname+&quot;:show&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    //重载方法  </span><br><span class="line">    void show(String massage) &#123;  </span><br><span class="line">        System.out.println(classname+&quot;:&quot;+massage);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return &quot;showclass&#123;&quot; +  </span><br><span class="line">                &quot;classname=&#x27;&quot; + classname + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &#x27;&#125;&#x27;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用（我已经知道类的信息了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        showclass showclass = new showclass(&quot;LiMing&quot;);  </span><br><span class="line">        showclass.show();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1.png" class=""><p>但是你不知道，程序只能靠运行时信息来发现，自然也就没法在编码阶段直接使用new来创建对象和使用对象，但是使用反射来使用showclass类是可以的</p><p>（资料）在sping中，就有反射来动态构造类和属性的使用</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/2.png" class=""><p>指定需要class，sping就会帮我们创建好并进行赋值</p><p>那使用反射来进行刚才的操作：<br>获取类，创建对象，属性赋值，调用方法<br>（想写的都在注释里面）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        //外部包可以是&quot;com.xxx.showclass&quot;,这里没有所以直接使用showclass  </span><br><span class="line">        //可能会出现找不到类的错误，把它放进异常里面  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">        //我们要如何根据c信息操作呢  </span><br><span class="line">        // 所有类都是继承自Object  </span><br><span class="line">        Object obj=c.newInstance();  </span><br><span class="line">        System.out.println(obj);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/3.png" class=""><p>但是想要传入message有参构造就不能使用newInstance()了，而且java9之后这个方法也被废弃了，我么可以使用getConstructor()获取构造器</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/4.png" class=""><p>接收的是一堆类型是因为重载</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/5.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6.png" class=""><p>这种情况下会报错，说找不到方法，因为前面属性定义问题，如果换成public就可以了，但更改不是咱们说了算的，所以使用getgetDeclaredConstructor()方法获取所有的构造器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">  </span><br><span class="line">        Constructor cs=c.getDeclaredConstructor(String.class);  </span><br><span class="line">        Object o =  cs.newInstance(&quot;Jenny&quot;);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(o);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行成功<br>想要修改一个类中的属性</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/7.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/8.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">import java.lang.reflect.Field;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">  </span><br><span class="line">        Constructor cs=c.getDeclaredConstructor(String.class);  </span><br><span class="line">        Object o =  cs.newInstance(&quot;Jenny&quot;);  </span><br><span class="line">  </span><br><span class="line">        Field f=c.getDeclaredField(&quot;classname&quot;);  </span><br><span class="line">        f.setAccessible(true);  </span><br><span class="line">        f.set(o,&quot;Denny&quot;);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(o);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对属性权限的修改，然后修改属性的value<br>同样的如果想要获取方法，使用getMethods()获得public级别的方法，使用getDeclaredMethods()获取所有权限的方法</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/9.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/10.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/11.png" class=""><p>如果方法为私有，也可以同样的设置setAccessible(ture)来进行修改</p><p>以上为java反射机制的基础知识</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;（抽象概念）RTTI（Run-Time Type Identification）运行时类型识别，主要两种方式&lt;br&gt;  传统的RTTI，我们编写知道所有的类型·&lt;br&gt;  反射机制，允许在运行时查询和操作类的信息&lt;br&gt;  太抽象了举例子&lt;br&gt;  正常写代码，</summary>
      
    
    
    
    <category term="Java_Security" scheme="https://usingns.github.io/categories/Java-Security/"/>
    
    
    <category term="Java" scheme="https://usingns.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>关于个人博客的搭建</title>
    <link href="https://usingns.github.io/2025/03/31/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://usingns.github.io/2025/03/31/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2025-03-31T11:07:23.000Z</published>
    <updated>2025-03-31T11:36:24.573Z</updated>
    
    <content type="html"><![CDATA[<p>很早就有这样的想法，断断续续又有半途而废，终于直到今天才决定完全做成</p><h2 id="首先使用github-hexo的组合"><a href="#首先使用github-hexo的组合" class="headerlink" title="首先使用github+hexo的组合"></a>首先使用github+hexo的组合</h2><p>Hexo 是<strong>一款基于Node.js 的快速、简洁且高效的静态博客框架</strong><br>知道这些就够了()只是抱着使用的想法来了解<br>#git安装<br>#node安装 %%别忘了环境变量的配置%%<br>#安装hexo</p><h2 id="git-ssh-key"><a href="#git-ssh-key" class="headerlink" title="git ssh key"></a>git ssh key</h2><p>为什么要配置SSH key？ 目的：可以免密的将本地的源码和资源上传到github，无需要每次都输账号和密码。<br>本地生成</p><p>上传到github</p><p>配置git用户名和用户邮箱</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章 </span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面 </span><br><span class="line">hexo generate #生成静态页面至public目录 </span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server） </span><br><span class="line">hexo deploy #部署到GitHub </span><br><span class="line">hexo help # 查看帮助 </span><br><span class="line">hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>在选择的根目录进行初步搭建，并修改_config.yml</p><h2 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h2><p>hexo的github主题项目，下载解压到theme，记得修改配置文件<br>大功告成~</p><p>参考</p><p><a href="https://cloud.tencent.com/developer/article/1852344">https://cloud.tencent.com/developer/article/1852344</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很早就有这样的想法，断断续续又有半途而废，终于直到今天才决定完全做成&lt;/p&gt;
&lt;h2 id=&quot;首先使用github-hexo的组合&quot;&gt;&lt;a href=&quot;#首先使用github-hexo的组合&quot; class=&quot;headerlink&quot; title=&quot;首先使用github+hex</summary>
      
    
    
    
    <category term="博客搭建" scheme="https://usingns.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://usingns.github.io/tags/Hexo/"/>
    
    <category term="github" scheme="https://usingns.github.io/tags/github/"/>
    
    <category term="node.js" scheme="https://usingns.github.io/tags/node-js/"/>
    
    <category term="ssh" scheme="https://usingns.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://usingns.github.io/2025/03/31/hello-world/"/>
    <id>https://usingns.github.io/2025/03/31/hello-world/</id>
    <published>2025-03-31T09:15:22.962Z</published>
    <updated>2025-03-31T09:59:20.836Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
