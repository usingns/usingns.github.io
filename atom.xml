<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://usingns.github.io/atom.xml" rel="self"/>
  
  <link href="https://usingns.github.io/"/>
  <updated>2025-07-14T05:24:53.237Z</updated>
  <id>https://usingns.github.io/</id>
  
  <author>
    <name>us1n9ns</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>上海交通大学生存手册随笔</title>
    <link href="https://usingns.github.io/2025/07/14/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C%E9%9A%8F%E7%AC%94/"/>
    <id>https://usingns.github.io/2025/07/14/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C%E9%9A%8F%E7%AC%94/</id>
    <published>2025-07-14T05:08:13.000Z</published>
    <updated>2025-07-14T05:24:53.237Z</updated>
    
    <content type="html"><![CDATA[<p>真正成为我们上课理由的，只有对知识的渴望</p><p>学习需要的不是悲壮的毅力，是对知识的渴求</p><p>平庸的生活方式是麻醉剂</p><p>我们必须一日三省，今天的时间是否过得有价值</p><blockquote><p>我们应该对计划时间下的工作量有足够认识。小到一小时、一天，大到个暑假、一个学期，或者是大学四年，制定切实可行的计划，并为不能完成计划自责是最基本的要求。所谓的牛人和大多数庸人的主要差别，一方面在于有没有时间可以利用;再一方面，就是时间的利用率。我们必须时刻保持一种紧迫感，以保证时间不被虚度。只要你能把在校期问的时问正确地加以利用。不需要超人的天分–甚至不需要特别努力，你都有望在你的专业领域里出类拔萃。<br>危险的。在科研这条道路上，只有对一门学科的喜爱，才能成为你唯一和全部的动力。这个喜爱不应当是抽象的，喜欢某门学科和喜欢某项运动从道理上很相似:比如你说喜欢篮球，你一定不会是因为看到那个球在地上滚就觉得很兴奋，而是因为你对篮球作为一项竞技运动有足够的了解，所以才喜欢打，或者喜欢看篮球。喜欢一个学科也是一样，无知的兴趣一定是苍白的。</p></blockquote><p>原创性思考</p><blockquote><p>脑海中勾勒出一个清晰的知识结构是每名研究人员自己的事。新进入研究领域的学生，必须学会如何自己归纳知识结构。如果有人问及你正在做的工作，你应该能像从 Google Earth 中找自己家一样，把自己的工作在一年、五年、十年、甚至整个世纪的时间尺度下，并且清晰、准确、不带偏见地勾勒出你正在做的工作在整个学科中的位置。可以说，清醒的位置感和准确的方向感，是比雄厚的基础知识更为重要的成功要素。<br>在研究中，知道做什么比知道怎样做更为重要<br>有很多同学在设计课上钻进了完美主义的死胡同。设计是工程，设计课更是工程。如果把课堂作业当成艺术的话，我不知道该说你幼稚还是愚蠢。要知道，方案设计永远没有尽头，但对一门设计课程作业，你的上限是<br>在同等工作量的前提下，明智的进度控制应该是把自己的全部工作平均分配在各次课上提交。即便你已经做完了更多，也必须像说评书一样娓娓道来，说一半藏一半，不要一股脑呈现完。因为不是所有同学都有新东西，所以我们更要保证每次上课都有新的东西给老师看，并注意和老师多加“探讨”。只要混个脸熟，你的印象分就会有很大提升。<br>在设计的最后阶段，尤其不要进行无谓的修改,不要把时问浪费在徒劳的心理抚慰上。即使老师提出了一些修改要求，你也没必要完全照办。把现有阶段的设计表现清楚，按时交图，这是想拿高分的基本要求。</p></blockquote><hr><p>小结：</p><ul><li><p>做真正对知识学习有帮助的事情，帮助越长远越值得去做</p></li><li><p>保证自己的原创性思考</p></li><li><p>在研究中，把握个人定位，自己走到了哪一步（位置感和方向感）和自己要如何走这步（时间利用率和计划与规划）</p></li><li><p>平庸的生活方式是麻醉剂，我们必须一日三省，今天的时间是否过得有价值</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;真正成为我们上课理由的，只有对知识的渴望&lt;/p&gt;
&lt;p&gt;学习需要的不是悲壮的毅力，是对知识的渴求&lt;/p&gt;
&lt;p&gt;平庸的生活方式是麻醉剂&lt;/p&gt;
&lt;p&gt;我们必须一日三省，今天的时间是否过得有价值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们应该对计划时间下的工作量有足够认识。</summary>
      
    
    
    
    
    <category term="上海交通大学生存手册" scheme="https://usingns.github.io/tags/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>反射机制</title>
    <link href="https://usingns.github.io/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://usingns.github.io/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</id>
    <published>2025-04-03T03:07:50.000Z</published>
    <updated>2025-07-14T05:16:01.122Z</updated>
    
    <content type="html"><![CDATA[<ul><li>（抽象概念）RTTI（Run-Time Type Identification）运行时类型识别，主要两种方式<br>  传统的RTTI，我们编写知道所有的类型·<br>  反射机制，允许在运行时查询和操作类的信息<br>  太抽象了举例子<br>  正常写代码，一个类写出来</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class showclass &#123;  </span><br><span class="line">    String classname;  </span><br><span class="line">    //默认无参方法  </span><br><span class="line">    showclass() &#123;&#125;  </span><br><span class="line">    //有参方法  </span><br><span class="line">    showclass(String classname) &#123;  </span><br><span class="line">        //初始化  </span><br><span class="line">        this.classname = classname;  </span><br><span class="line">    &#125;  </span><br><span class="line">    void show() &#123;  </span><br><span class="line">        System.out.println(classname+&quot;:show&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    //重载方法  </span><br><span class="line">    void show(String massage) &#123;  </span><br><span class="line">        System.out.println(classname+&quot;:&quot;+massage);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return &quot;showclass&#123;&quot; +  </span><br><span class="line">                &quot;classname=&#x27;&quot; + classname + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &#x27;&#125;&#x27;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用（我已经知道类的信息了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        showclass showclass = new showclass(&quot;LiMing&quot;);  </span><br><span class="line">        showclass.show();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1.png" class=""><p>但是你不知道，程序只能靠运行时信息来发现，自然也就没法在编码阶段直接使用new来创建对象和使用对象，但是使用反射来使用showclass类是可以的</p><p>（资料）在sping中，就有反射来动态构造类和属性的使用</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/2.png" class=""><p>指定需要class，sping就会帮我们创建好并进行赋值</p><p>那使用反射来进行刚才的操作：<br>获取类，创建对象，属性赋值，调用方法<br>（想写的都在注释里面）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        //外部包可以是&quot;com.xxx.showclass&quot;,这里没有所以直接使用showclass  </span><br><span class="line">        //可能会出现找不到类的错误，把它放进异常里面  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">        //我们要如何根据c信息操作呢  </span><br><span class="line">        // 所有类都是继承自Object  </span><br><span class="line">        Object obj=c.newInstance();  </span><br><span class="line">        System.out.println(obj);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/3.png" class=""><p>但是想要传入message有参构造就不能使用newInstance()了，而且java9之后这个方法也被废弃了，我么可以使用getConstructor()获取构造器</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/4.png" class=""><p>接收的是一堆类型是因为重载</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/5.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6.png" class=""><p>这种情况下会报错，说找不到方法，因为前面属性定义问题，如果换成public就可以了，但更改不是咱们说了算的，所以使用getgetDeclaredConstructor()方法获取所有的构造器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">  </span><br><span class="line">        Constructor cs=c.getDeclaredConstructor(String.class);  </span><br><span class="line">        Object o =  cs.newInstance(&quot;Jenny&quot;);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(o);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行成功<br>想要修改一个类中的属性</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/7.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/8.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">import java.lang.reflect.Field;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">  </span><br><span class="line">        Constructor cs=c.getDeclaredConstructor(String.class);  </span><br><span class="line">        Object o =  cs.newInstance(&quot;Jenny&quot;);  </span><br><span class="line">  </span><br><span class="line">        Field f=c.getDeclaredField(&quot;classname&quot;);  </span><br><span class="line">        f.setAccessible(true);  </span><br><span class="line">        f.set(o,&quot;Denny&quot;);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(o);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对属性权限的修改，然后修改属性的value<br>同样的如果想要获取方法，使用getMethods()获得public级别的方法，使用getDeclaredMethods()获取所有权限的方法</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/9.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/10.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/11.png" class=""><p>如果方法为私有，也可以同样的设置setAccessible(ture)来进行修改</p><p>以上为java反射机制的基础知识</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;（抽象概念）RTTI（Run-Time Type Identification）运行时类型识别，主要两种方式&lt;br&gt;  传统的RTTI，我们编写知道所有的类型·&lt;br&gt;  反射机制，允许在运行时查询和操作类的信息&lt;br&gt;  太抽象了举例子&lt;br&gt;  正常写代码，</summary>
      
    
    
    
    <category term="Java_Security" scheme="https://usingns.github.io/categories/Java-Security/"/>
    
    
    <category term="Java" scheme="https://usingns.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>关于个人博客的搭建</title>
    <link href="https://usingns.github.io/2025/03/31/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://usingns.github.io/2025/03/31/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2025-03-31T11:07:23.000Z</published>
    <updated>2025-07-14T05:05:34.845Z</updated>
    
    <content type="html"><![CDATA[<p>很早就有这样的想法，断断续续又有半途而废，终于直到今天才决定完全做成</p><h2 id="首先使用github-hexo的组合"><a href="#首先使用github-hexo的组合" class="headerlink" title="首先使用github+hexo的组合"></a>首先使用github+hexo的组合</h2><p>Hexo 是<strong>一款基于Node.js 的快速、简洁且高效的静态博客框架</strong><br>知道这些就够了()只是抱着使用的想法来了解<br>#git安装<br>#node安装 %%别忘了环境变量的配置%%<br>#安装hexo</p><h2 id="git-ssh-key"><a href="#git-ssh-key" class="headerlink" title="git ssh key"></a>git ssh key</h2><p>为什么要配置SSH key？ 目的：可以免密的将本地的源码和资源上传到github，无需要每次都输账号和密码。<br>本地生成</p><p>上传到github</p><p>配置git用户名和用户邮箱</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章 </span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面 </span><br><span class="line">hexo generate #生成静态页面至public目录 </span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server） </span><br><span class="line">hexo deploy #部署到GitHub </span><br><span class="line">hexo help # 查看帮助 </span><br><span class="line">hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>在选择的根目录进行初步搭建，并修改_config.yml</p><h2 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h2><p>hexo的github主题项目，下载解压到theme，记得修改配置文件<br>大功告成~</p><p>参考</p><p><a href="https://cloud.tencent.com/developer/article/1852344">https://cloud.tencent.com/developer/article/1852344</a></p><p>#####不吐不快的踩坑记录</p><p>1.<code>hexo-renderer-marked</code> 是 Hexo 渲染 Markdown 的核心插件之一<br>这是官方记录的描述，但是正常使用是没有人去自己单独安装他的，至少在2025.7我进行测试的时候，这个版本与当前版本冲突。。。安了会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\blog&gt;hexo g</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>更为无语的是这里的报错查看日志会发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3:29:01.811 DEBUG Processed: layout/_partial/math/mathjax.ejs</span><br><span class="line">03:29:01.811 DEBUG Processed: layout/_partial/script/font-loader.ejs</span><br><span class="line">03:29:01.811 DEBUG Processed: layout/_partial/sidebar/sidebar-categories.ejs</span><br><span class="line">03:29:01.811 DEBUG Processed: languages/default.yml</span><br><span class="line">03:29:01.812 DEBUG Processed: languages/en.yml</span><br><span class="line">03:29:01.813 DEBUG Processed: layout/_partial/sidebar/sidebar-archives.ejs</span><br><span class="line">03:29:01.813 DEBUG Processed: layout/_partial/sidebar/sidebar-tags.ejs</span><br><span class="line">03:29:01.813 DEBUG Processed: layout/_partial/sidebar/base-sidebar.ejs</span><br><span class="line">03:29:01.815 FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">03:29:01.821 DEBUG Database saved</span><br></pre></td></tr></table></figure><p>没错，你没有看错，日志也只有一句模糊的报错而已。。。这是正常人能干出的事情。。。实在无力吐槽</p><p>导致排查的时候根本不知道哪里出现了问题</p><p>解决办法：卸载就好了。。。同时注意卸载之后安装回默认渲染，注意配置文件需要手动修改</p><p>2.各位在搭建的时候一定要注意版本问题，不仅仅是自己系统以及hexo的版本还有查阅文章资料的版本，因为这个系统已经有些年头了，可能中间经过几次维护，导致一些网上文章根本不实用于当前的hexo，再加上有很多低质文章，不说内容雷同，就是插件名字都有抄错的。即便是正儿八经的文章也要注意，上面的办法很可能不适用，在搞了半天之后，回去发布文章直接冒出来一个模模糊糊的FATAL真的让人火大。。。。</p><p>3.此外各种小bug也层出不穷，比如一直为人诟病的图片上传问题，还是使用的人太少了，小作坊无保障了属于是，不过也正是因为他小，各种错误可以穷尽，久病成医</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很早就有这样的想法，断断续续又有半途而废，终于直到今天才决定完全做成&lt;/p&gt;
&lt;h2 id=&quot;首先使用github-hexo的组合&quot;&gt;&lt;a href=&quot;#首先使用github-hexo的组合&quot; class=&quot;headerlink&quot; title=&quot;首先使用github+hex</summary>
      
    
    
    
    <category term="博客搭建" scheme="https://usingns.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://usingns.github.io/tags/Hexo/"/>
    
    <category term="github" scheme="https://usingns.github.io/tags/github/"/>
    
    <category term="node.js" scheme="https://usingns.github.io/tags/node-js/"/>
    
    <category term="ssh" scheme="https://usingns.github.io/tags/ssh/"/>
    
  </entry>
  
</feed>
